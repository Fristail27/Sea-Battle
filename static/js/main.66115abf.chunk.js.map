{"version":3,"sources":["common/preloader/Preloader.module.css","pages/registration/Registration.module.css","common/paginator/Paginator.module.css","pages/Packs/pack/Pack.module.css","pages/Cards/Card/Card.module.css","common/Input.module.css","pages/LearnCards/LearnCards.module.css","pages/common/c1-SuperInputText/SuperInputText.module.css","pages/common/c2-SuperButton/SuperButton.module.css","pages/common/c3-SuperCheckbox/SuperCheckbox.module.css","common/Navigation/Navigation.module.css","common/panelForPacks/PanelForPacks.module.css","common/modalWindow/modalError.module.css","pages/login/Login/Login.module.css","common/preloaderForNav/PreloaderForNav.module.css","pages/Packs/Packs.module.css","pages/Cards/Cards.module.css","api/authApi.ts","api/registration-api.ts","store/app-Reducer.ts","utils/validations/errHandler.ts","store/reg-Reducer.ts","utils/validations/validations.ts","common/EmailInput.tsx","common/PassInput.tsx","common/Button.tsx","common/modalWindow/modalError.tsx","pages/registration/Registration.tsx","pages/profile/Profile.tsx","api/PasswordRecoveryAPI.ts","store/passwordRecovery-Reducer.ts","common/preloader/Preloader.tsx","pages/newPasswordPage/NewPasswordPage.tsx","pages/passwordRecoveryPage/PasswordRecoveryPage.tsx","pages/common/c1-SuperInputText/SuperInputText.tsx","pages/common/c2-SuperButton/SuperButton.tsx","pages/common/c3-SuperCheckbox/SuperCheckbox.tsx","pages/testPage/TestPage.tsx","pages/error404/Error404.tsx","pages/login/Login/Login.tsx","store/auth-Reducer.ts","pages/login/LoginContainer.tsx","common/preloaderForNav/PreloaderForNav.tsx","common/Navigation/Navigation.tsx","api/packs-api.ts","store/packs-Reducer.ts","common/paginator/Paginator.tsx","common/panelForPacks/PanelForPacks.tsx","pages/Packs/pack/Pack.tsx","pages/Packs/Packs.tsx","api/cards-api.ts","store/cards-Reducer.ts","pages/Cards/Card/Card.tsx","pages/Cards/Cards.tsx","pages/LearnCards/LearnCards.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","regAPI","ON_CHANGE_APP_STATUS","initialState","appStatus","error","undefined","onChangeAppStatusAC","status","type","setErrorAC","errHandlerInTC","dispatch","err","setAppStatusAC","setErrAC","response","message","succeedRegister","registerAC","validations","mail","test","pass","length","EmailInput","email","onChange","useState","emailErr","setEmailErr","className","s","onFocus","value","onBlur","trim","e","currentTarget","placeholder","inputErr","style","marginTop","PassInput","password","passwordErr","setPasswordErr","Button","name","onClick","disabled","cursor","ModalError","useSelector","state","app","useDispatch","useEffect","setTimeout","modalWindow","Registration","reg","statusApp","setEmail","setPassword","repeatPassword","setRepeatPassword","setError","to","registrationModule","registrationForm","onSubmit","preventDefault","a","Profile","profName","auth","userData","isAuth","passwordRecoveryAPI","from","token","resetPasswordToken","errorStatusForNewPass","valueInputPass","valueInputPassRec","SET_ERROR_STATUS_FOR_NEW_PASS","ON_CHANGE_INPUT_PASS","ON_CHANGE_INPUT_PASS_REC","setErrorStatusForNewPassAC","onChangeInputPassAC","onChangeInputPassRecAC","Preloader","id","fountainG","fountainG_1","fountainG_2","fountainG_3","fountainG_4","fountainG_5","fountainG_6","fountainG_7","fountainG_8","NewPasswordPage","React","redirect","setRedirect","touchedPass","setTouchedPass","touchedPassRepeat","setTouchedPassRepeat","errorStatus","valuePass","passValid","valuePassRepeat","passRepeatValid","useParams","errorStylePass","border","errorStylePassRepeat","display","color","sendPassForNewPassTC","PasswordRecoveryPage","SuperInputText","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","superInput","errorInput","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","lab","checked","TestPage","Error404","Login","props","emailHandler","passwordHandler","elementInput","checkHandler","check","loginSuccess","AUTH_TRY","LOGOUT","authTryAC","LoginContainer","setEmailText","setPasswordText","rememberMe","setRememberMe","res","PreloaderForNav","linePreloader","Navigations","text","styles","container","wrapper","navigation","packsAPI","get","params","cardsPack","put","GET_CARDS_PACKS","SET_SEARCH_VALUE","SET_SORT_TYPE","SET_SORT_PACKS_ON_PAGE","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","searchValue","sortPacks","getPacksAC","setSortTypeAC","setFilterPacksAC","sortType","getPacksTC","getState","packs","Paginator","lastPagBlock","Math","ceil","pagesCount","paginatorSize","currentPaginatorBlock","setCurrentPaginatorBlock","Line","arr","i","push","nums","map","p","currentPage","currentNum","clickHandler","num","main","btns","startButtons","endButtons","PanelForPacks","pack","typeSelectValue","setTypeSelectValue","orderSelectValue","setOrderSelectValue","panel","search","packName","paginator","Pack","cp","updatePack","delPack","show","setShow","cardsCount","updated","split","replace","splitUpdFunc","buttons","margin","_id","shadow","modal","Packs","userId","rend","setRend","max","min","delPackTC","updPackTC","packsHeader","user_id","cardsAPI","card","grade","card_id","cards","cardsTotalCount","maxGrade","minGrade","packUserId","getCards","setCardGrade","shots","getCardsTC","Card","str","question","answer","cardsState","deleteCard","cardsPack_id","updateCard","Cards","cardId","packId","delCardTC","comments","n","cardsHeader","c","LearnCards","first","setFirst","created","setCard","sum","reduce","acc","rand","random","newSum","console","log","getCard","setGrade","updatedGrade","setCardGradeTC","learnCards","some","g","App","path","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyCardPacks","sortUp","b","sortDown","sortedCardPacks","sort","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66115abf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fountainG\":\"Preloader_fountainG__bCKyL\",\"bounce_fountainG\":\"Preloader_bounce_fountainG__2KlRb\",\"fountainG_1\":\"Preloader_fountainG_1__1hpN_\",\"fountainG_2\":\"Preloader_fountainG_2__hEvEe\",\"fountainG_3\":\"Preloader_fountainG_3__v02_w\",\"fountainG_4\":\"Preloader_fountainG_4__3aewM\",\"fountainG_5\":\"Preloader_fountainG_5__2kMZ5\",\"fountainG_6\":\"Preloader_fountainG_6__1VZ9R\",\"fountainG_7\":\"Preloader_fountainG_7__2eerP\",\"fountainG_8\":\"Preloader_fountainG_8__XeV9g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationModule\":\"Registration_registrationModule__4C-LG\",\"registrationForm\":\"Registration_registrationForm__3SkJI\",\"error\":\"Registration_error__3Nknh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Paginator_main__14XI_\",\"num\":\"Paginator_num__KQWJf\",\"currentNum\":\"Paginator_currentNum__2GKq0\",\"nums\":\"Paginator_nums__3Md42\",\"btns\":\"Paginator_btns__2WIA-\",\"startButtons\":\"Paginator_startButtons__1t93U\",\"endButtons\":\"Paginator_endButtons__3yIvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pack\":\"Pack_pack__2mE3E\",\"text\":\"Pack_text__1_AAQ\",\"name\":\"Pack_name__x63N2\",\"shadow\":\"Pack_shadow__3rPmp\",\"modal\":\"Pack_modal__3Ie44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3jZm8\",\"text\":\"Card_text__Y_PlN\",\"buttons\":\"Card_buttons__j94qb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputErr\":\"Input_inputErr__1IYV2\",\"error\":\"Input_error__a3_--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learnCards\":\"LearnCards_learnCards__2AmgU\",\"container\":\"LearnCards_container__18MM1\",\"cards\":\"LearnCards_cards__3QJtj\",\"some\":\"LearnCards_some__3iVH0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2wa_a\",\"errorInput\":\"SuperInputText_errorInput__3_ZWZ\",\"error\":\"SuperInputText_error__3jAp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2jDA_\",\"red\":\"SuperButton_red__O0154\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lab\":\"SuperCheckbox_lab__2Y2Hn\",\"checkbox\":\"SuperCheckbox_checkbox__3z_aH\",\"spanClassName\":\"SuperCheckbox_spanClassName__2WNVv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navigation_container__gi6HA\",\"wrapper\":\"Navigation_wrapper__2jaX7\",\"navigation\":\"Navigation_navigation___o7mt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"PanelForPacks_panel__Ev1FB\",\"search\":\"PanelForPacks_search__2bCiB\",\"paginator\":\"PanelForPacks_paginator__2R2zq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWindow\":\"modalError_modalWindow__3EGR4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLogin\":\"Login_formLogin__1-aqV\",\"elementInput\":\"Login_elementInput__1IqxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"linePreloader\":\"PreloaderForNav_linePreloader__2K5f7\",\"scroll\":\"PreloaderForNav_scroll__15MHC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsHeader\":\"Packs_packsHeader__3NTIe\",\"packs\":\"Packs_packs__3TOhW\",\"buttons\":\"Packs_buttons__1IYBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsHeader\":\"Cards_cardsHeader__2mjGm\",\"cards\":\"Cards_cards__1p4x7\",\"buttons\":\"Cards_buttons__3fCey\"};","import axios from 'axios'\r\nimport {UserDataType} from \"../store/auth-Reducer\";\r\n\r\nexport type userRequestData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true\r\n})\r\n\r\nexport const authAPI = {\r\n    userAuthorization(data: userRequestData) {\r\n        return instance.post<UserDataType>(\"auth/login\", data)\r\n    },\r\n    meRequest () {\r\n        return instance.post('auth/me',{})\r\n    },\r\n    logOut () {\r\n        return instance.delete('auth/me',{})\r\n    }\r\n}","import {instance} from \"./authApi\";\r\n\r\nexport type DataType = {\r\n    email: string\r\n    password: string\r\n}\r\ntype RegisterResponseType = {\r\n    addedUser: {}\r\n    error?: string\r\n}\r\n\r\nexport const regAPI = {\r\n    register(data: DataType) {\r\n        return instance.post<RegisterResponseType>(\"auth/register\", data)\r\n    }\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = typeof initialState\r\nexport type OnChangeAppStatusActionType = ReturnType<typeof onChangeAppStatusAC>\r\nexport type SetErrorActionType = ReturnType<typeof setErrorAC>\r\ntype ActionsType = OnChangeAppStatusActionType | SetErrorActionType\r\n\r\nconst ON_CHANGE_APP_STATUS = \"App/ON_CHANGE_APP_STATUS\"\r\nconst SET_ERROR = \"reg/SET-ERROR\"\r\n\r\nconst initialState = {\r\n    appStatus: 'loading' as RequestStatusType,\r\n    error: undefined as string | undefined\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ON_CHANGE_APP_STATUS:\r\n            return {...state, appStatus: action.status}\r\n        case \"reg/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const onChangeAppStatusAC = (status: RequestStatusType) => ({type: ON_CHANGE_APP_STATUS, status} as const)\r\nexport const setErrorAC = (error: string) => ({type: SET_ERROR, error} as const)\r\n","import {Dispatch} from \"redux\"\r\n\r\nexport function errHandlerInTC(dispatch: Dispatch<any>, err: any, setAppStatusAC: any, setErrAC?: any) {\r\n\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n    if (setErrAC) {\r\n        if (err.response) {\r\n            dispatch(setErrAC(err.response.data.error))\r\n        } else {\r\n            dispatch(setErrAC(err.message))\r\n        }\r\n    }\r\n}","import {DataType, regAPI} from \"../api/registration-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {onChangeAppStatusAC, setErrorAC} from \"./app-Reducer\";\r\nimport {errHandlerInTC} from \"../utils/validations/errHandler\";\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = RegisterActionType\r\n\r\nconst SET_REGISTER = \"reg/SET-REGISTER\"\r\n\r\nconst initialState = {\r\n    succeedRegister: false,\r\n    error: undefined as string | undefined\r\n}\r\n\r\nexport const regReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"reg/SET-REGISTER\":\r\n            return {...state, succeedRegister: action.succeedRegister}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const registerAC = (succeedRegister: boolean) => {\r\n    return {\r\n        type: SET_REGISTER,\r\n        succeedRegister\r\n    } as const\r\n}\r\n\r\ntype RegisterActionType = ReturnType<typeof registerAC>\r\n\r\nexport const registerTC = (data: DataType) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await regAPI.register(data)\r\n        dispatch(registerAC(true))\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC, setErrorAC)\r\n    }\r\n}","export const validations = {\r\n    emailValid(mail: string) {\r\n        return (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(mail))\r\n    },\r\n    passValid(pass: string) {\r\n        return (pass.length < 8)\r\n    }\r\n}\r\n","import s from \"./Input.module.css\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {validations} from \"../utils/validations/validations\";\r\n\r\ntype EmailInputPropsType = {\r\n    email: string\r\n    onChange: (email: string) => void\r\n}\r\n\r\nexport const EmailInput: React.FC<EmailInputPropsType> = ({email, onChange}) => {\r\n\r\n    const [emailErr, setEmailErr] = useState<string>(\"\")\r\n\r\n    const onBlurEmail = () => {\r\n        if (email.trim() === \"\") {\r\n            setEmailErr('Email Required')\r\n            onChange(\"\")\r\n        }\r\n        if (email) {\r\n            if (validations.emailValid(email)) {\r\n                setEmailErr('Invalid email address')\r\n            } else {\r\n                setEmailErr('')\r\n            }\r\n        }\r\n    }\r\n    const onMailChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input className={emailErr && s.error} onFocus={() => setEmailErr('')} value={email}\r\n                       onBlur={onBlurEmail} onChange={onMailChangeHandler} placeholder=\"Email\" type={\"email\"}/>\r\n            </div>\r\n            {emailErr && <div className={s.inputErr} style={{marginTop: \"-3px\"}}>{emailErr}</div>}\r\n        </div>\r\n    )\r\n}","import s from \"./Input.module.css\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {validations} from \"../utils/validations/validations\";\r\n\r\ntype PassInputPropsType = {\r\n    password: string\r\n    onChange: (pass: string) => void\r\n}\r\n\r\nexport const PassInput: React.FC<PassInputPropsType> = ({password, onChange}) => {\r\n\r\n    const [passwordErr, setPasswordErr] = useState<string>(\"\")\r\n\r\n    const onBlurPass = () => {\r\n        if (password.trim() === \"\") {\r\n            setPasswordErr('Password Required')\r\n        }\r\n        if (password) {\r\n            if (validations.passValid(password)) {\r\n                setPasswordErr('Password must be more than 7 characters')\r\n            } else {\r\n                setPasswordErr('')\r\n            }\r\n        }\r\n    }\r\n    const onPassChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e.currentTarget.value.trim())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input className={passwordErr && s.error} onFocus={() => setPasswordErr('')} value={password}\r\n                       onBlur={onBlurPass} onChange={onPassChangeHandler} placeholder=\"Password\" type={\"password\"}/>\r\n            </div>\r\n            {passwordErr && <div className={s.inputErr} style={{marginTop: \"-3px\"}}>{passwordErr}</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {RequestStatusType} from \"../store/app-Reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick: () => void\r\n    status: RequestStatusType\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({name, onClick, status}) => {\r\n    return (\r\n        <div>\r\n            <button disabled={status === \"loading\"} style={{cursor:\"pointer\"}} onClick={onClick}>{name}</button>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport s from \"./modalError.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setErrorAC} from \"../../store/app-Reducer\";\r\n\r\nexport const ModalError = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | undefined>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setTimeout(() => dispatch(setErrorAC('')), 3000)\r\n        }\r\n    }, [error, dispatch])\r\n\r\n    return (\r\n        <div>\r\n            {error && <div className={s.modalWindow}>{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport s from \"./Registration.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {registerAC, registerTC} from \"../../store/reg-Reducer\";\r\nimport {onChangeAppStatusAC, RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {EmailInput} from \"../../common/EmailInput\";\r\nimport {PassInput} from \"../../common/PassInput\";\r\nimport {Button} from \"../../common/Button\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\nimport {ModalError} from \"../../common/modalWindow/modalError\";\r\n\r\nconst Registration = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const succeedRegister = useSelector<AppRootStateType, boolean>(state => state.reg.succeedRegister)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const [email, setEmail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const [repeatPassword, setRepeatPassword] = useState<string>(\"\")\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (succeedRegister) {\r\n            setTimeout(() => dispatch(registerAC(false)), 1000)\r\n        }\r\n        if (error) {\r\n            setTimeout(() => setError(\"\"), 3000)\r\n        }\r\n    }, [succeedRegister, error, dispatch])\r\n\r\n    const onRepeatPassChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRepeatPassword(e.currentTarget.value)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const onButtonClick = () => {\r\n        if (email && password) {\r\n            if (password === repeatPassword && !validations.emailValid(email)) {\r\n                dispatch(registerTC({email, password}))\r\n            } else {\r\n                setError(\"incorrect email or password\")\r\n            }\r\n        } else {\r\n            setError(\"required email and password\")\r\n        }\r\n    }\r\n\r\n    if (succeedRegister) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.registrationModule}>\r\n            <h1>Registration</h1>\r\n            <form className={s.registrationForm} onSubmit={(e) => e.preventDefault()}>\r\n                <EmailInput email={email} onChange={setEmail}/>\r\n                <PassInput password={password} onChange={setPassword}/>\r\n                <div>\r\n                    <input value={repeatPassword} onChange={onRepeatPassChangeHandler}\r\n                           placeholder=\"Repeat password\" type={\"password\"}/>\r\n                    {password !== repeatPassword ? <div className={s.error}>Different Password</div> : \"\"}\r\n                </div>\r\n                <Button name={\"Register\"} onClick={onButtonClick} status={statusApp}/>\r\n                {error && <div style={{marginTop:\"165px\"}} className={s.error}>{error}</div>}\r\n                <NavLink to={\"/login\"}>Sign in</NavLink>\r\n            </form>\r\n            <ModalError/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\nconst Profile = () => {\r\n    const profName = useSelector<AppRootStateType, string | null>(state => state.auth.userData && state.auth.userData.name)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    if(!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <h1>profile {profName}</h1>\r\n}\r\n\r\nexport default Profile","import {instance} from \"./authApi\";\r\n\r\nexport const passwordRecoveryAPI = {\r\n    sendEmailForChangePassword(mail: string) {\r\n        return instance.post('auth/forgot', {\r\n            email: mail,\r\n            from: \"Fristail27  <Fristail27@gmail.com>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                            password recovery link: <a href='http://localhost:3000/Progect#/new-password-page/$token$'>link</a>\r\n                      </div>`\r\n        })\r\n    },\r\n    sendNewPassword (pass:string, token:string) {\r\n        return instance.post('auth/set-new-password', {\r\n            password: pass,\r\n            resetPasswordToken: token\r\n        })\r\n    }\r\n\r\n}","import {passwordRecoveryAPI} from \"../api/PasswordRecoveryAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {onChangeAppStatusAC} from \"./app-Reducer\";\r\nimport {errHandlerInTC} from \"../utils/validations/errHandler\";\r\n\r\nexport const initialState = {\r\n    errorStatusForNewPass: null as string | null,\r\n    valueInputPass: \"\" as string,\r\n    valueInputPassRec: \"\" as string,\r\n}\r\n\r\nconst SET_ERROR_STATUS_FOR_NEW_PASS = \"passwordRecovery/SET_ERROR_STATUS_FOR_NEW_PASS\"\r\nconst ON_CHANGE_INPUT_PASS = \"passwordRecovery/ON_CHANGE_INPUT_PASS\"\r\nconst ON_CHANGE_INPUT_PASS_REC = \"passwordRecovery/ON_CHANGE_INPUT_PASS_REC\"\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype SetErrorStatusForNewPassActionType = ReturnType<typeof setErrorStatusForNewPassAC>\r\ntype OnChangeInputPassActionType = ReturnType<typeof onChangeInputPassAC>\r\ntype onChangeInputPassRecActionType = ReturnType<typeof onChangeInputPassRecAC>\r\ntype ActionsType = SetErrorStatusForNewPassActionType | OnChangeInputPassActionType | onChangeInputPassRecActionType\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_ERROR_STATUS_FOR_NEW_PASS:\r\n            return {...state, errorStatusForNewPass: action.error}\r\n        case ON_CHANGE_INPUT_PASS:\r\n            return {...state, valueInputPass: action.value}\r\n        case ON_CHANGE_INPUT_PASS_REC:\r\n            return {...state, valueInputPassRec: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setErrorStatusForNewPassAC = (error: string | null) => ({\r\n    type: SET_ERROR_STATUS_FOR_NEW_PASS, error\r\n} as const)\r\nexport const onChangeInputPassAC = (value: string) => ({type: ON_CHANGE_INPUT_PASS, value} as const)\r\nexport const onChangeInputPassRecAC = (value: string) => ({type: ON_CHANGE_INPUT_PASS_REC, value} as const)\r\n\r\n//thunks\r\nexport const sendEmailForRecoveryPassTC = (mail: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await passwordRecoveryAPI.sendEmailForChangePassword(mail)\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC)\r\n    }\r\n}\r\nexport const sendPassForNewPassTC = (pass: string, token: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await passwordRecoveryAPI.sendNewPassword(pass, token)\r\n        dispatch(onChangeInputPassAC(\"\"))\r\n        dispatch(onChangeInputPassRecAC(\"\"))\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC, setErrorStatusForNewPassAC)\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Preloader.module.css\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div id={s.fountainG}>\r\n            <div id={s.fountainG_1} className={s.fountainG}/>\r\n            <div id={s.fountainG_2} className={s.fountainG}/>\r\n            <div id={s.fountainG_3} className={s.fountainG}/>\r\n            <div id={s.fountainG_4} className={s.fountainG}/>\r\n            <div id={s.fountainG_5} className={s.fountainG}/>\r\n            <div id={s.fountainG_6} className={s.fountainG}/>\r\n            <div id={s.fountainG_7} className={s.fountainG}/>\r\n            <div id={s.fountainG_8} className={s.fountainG}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {\r\n    onChangeInputPassAC, onChangeInputPassRecAC, sendPassForNewPassTC, setErrorStatusForNewPassAC\r\n} from \"../../store/passwordRecovery-Reducer\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\nimport {onChangeAppStatusAC} from \"../../store/app-Reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\n\r\nconst NewPasswordPage: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [redirect, setRedirect] = React.useState<boolean>(false)\r\n    const [touchedPass, setTouchedPass] = React.useState<boolean>(false)\r\n    const [touchedPassRepeat, setTouchedPassRepeat] = React.useState<boolean>(false)\r\n    const errorStatus = useSelector<AppRootStateType, string | null>(state => state.pass.errorStatusForNewPass)\r\n    const valuePass = useSelector<AppRootStateType, string>(state => state.pass.valueInputPass)\r\n    const passValid = validations.passValid(valuePass)\r\n    const valuePassRepeat = useSelector<AppRootStateType, string>(state => state.pass.valueInputPassRec)\r\n    const passRepeatValid = validations.passValid(valuePassRepeat)\r\n    const statusApp = useSelector<AppRootStateType, string>(state => state.app.appStatus)\r\n    const {token} = useParams<{ token?: string }>();\r\n\r\n    const onChangeHandlerPass = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (errorStatus) {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n        if (touchedPass || touchedPassRepeat) {\r\n            setTouchedPass(false)\r\n            setTouchedPassRepeat(false)\r\n        }\r\n        dispatch(onChangeInputPassAC(e.currentTarget.value))\r\n    }\r\n    const onChangeHandlerPassRepeat = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (errorStatus) {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n        if (touchedPass || touchedPassRepeat) {\r\n            setTouchedPass(false)\r\n            setTouchedPassRepeat(false)\r\n        }\r\n        dispatch(onChangeInputPassRecAC(e.currentTarget.value))\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        if (valuePass !== valuePassRepeat) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Пароли не совпадают\"))\r\n        } else if (validations.passValid(valuePass)) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Длина пароля должна быть больше 7 символов\"))\r\n        } else {\r\n            if (token) {\r\n                dispatch(sendPassForNewPassTC(valuePass, token))\r\n            }\r\n            if (statusApp === \"succeeded\") {\r\n                setRedirect(true)\r\n                dispatch(onChangeAppStatusAC(\"idle\"))\r\n            }\r\n        }\r\n    }\r\n    const errorStylePass = (passValid && touchedPass) ? {border: \"2px solid red\"} : {}\r\n    const errorStylePassRepeat = (passRepeatValid && touchedPassRepeat) ? {border: \"2px solid red\"} : {}\r\n\r\n    const onBlurHandlerPass = () => {\r\n        if (passValid) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Некоректный пароль\"))\r\n            setTouchedPass(true)\r\n            setTouchedPassRepeat(true)\r\n        } else {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n    }\r\n    const onBlurHandlerPassRepeat = () => {\r\n        if (passRepeatValid) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Некоректный пароль\"))\r\n            setTouchedPass(true)\r\n            setTouchedPassRepeat(true)\r\n        } else {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {redirect && <Redirect to={\"/login\"}/>}\r\n            <h1>New Password Page</h1>\r\n            <label style={{display: \"block\"}}><input onBlur={onBlurHandlerPass} onFocus={() => setTouchedPass(true)}\r\n                                                     style={errorStylePass} value={valuePass}\r\n                                                     onChange={onChangeHandlerPass} type=\"text\"/>Password</label>\r\n            <label style={{display: \"block\"}}><input onBlur={onBlurHandlerPassRepeat}\r\n                                                     onFocus={() => setTouchedPassRepeat(true)}\r\n                                                     style={errorStylePassRepeat} value={valuePassRepeat}\r\n                                                     onChange={onChangeHandlerPassRepeat} type=\"text\"/>repeat\r\n                Password</label>\r\n            {errorStatus && <span style={{color: \"red\"}}>{errorStatus}</span>}\r\n            <button disabled={statusApp === \"loading\"} onClick={clickHandler}>Change Pass</button>\r\n            {statusApp === \"loading\" && <Preloader/>}\r\n            {statusApp === \"succeeded\" && <span style={{color: \"green\"}}>{statusApp}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPasswordPage","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendEmailForRecoveryPassTC} from \"../../store/passwordRecovery-Reducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {EmailInput} from \"../../common/EmailInput\";\r\nimport {Button} from \"../../common/Button\";\r\nimport s from \"../registration/Registration.module.css\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\n\r\n\r\nconst PasswordRecoveryPage = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [email, setEmail] = useState(\"\")\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const clickHandler = () => {\r\n        if (email) {\r\n            if (!validations.emailValid(email)) {\r\n                dispatch(sendEmailForRecoveryPassTC(email))\r\n            } else {\r\n                setError(\"incorrect email\")\r\n            }\r\n        } else {\r\n            setError(\"required email\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Password Recovery Page</h1>\r\n            <form className={s.registrationForm} onSubmit={(e) => e.preventDefault()}>\r\n                <EmailInput email={email} onChange={setEmail}/>\r\n                <Button name={\"Send email\"} onClick={clickHandler} status={statusApp}/>\r\n                {error && <p style={{color:\"red\"}}>{error}</p>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordRecoveryPage\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : \"\" } `; // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = ` ${s.default} ${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked :boolean) => void,\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label className={s.lab}>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <div className={s.spanClassName}>{children}</div>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React from \"react\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport { Preloader } from \"../../common/preloader/Preloader\";\r\nimport {ModalError} from \"../../common/modalWindow/modalError\";\r\n\r\n\r\nconst TestPage = () => {\r\n    return (\r\n        <>\r\n            <SuperInputText/>\r\n            <SuperButton children={\"TEST\"} />\r\n            <SuperCheckbox children={\"TEST\"}/>\r\n            <Preloader/>\r\n            <ModalError/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestPage","import React from \"react\";\r\n\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <h1>Error404: Page not found</h1>\r\n    )\r\n}\r\n\r\nexport default Error404\r\n","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport s from \"../../registration/Registration.module.css\";\r\nimport {EmailInput} from \"../../../common/EmailInput\";\r\nimport {PassInput} from \"../../../common/PassInput\";\r\nimport {Button} from \"../../../common/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {RequestStatusType} from \"../../../store/app-Reducer\";\r\nimport {ModalError} from \"../../../common/modalWindow/modalError\";\r\n\r\ntype LoginPropsType = {\r\n    emailHandler: (email: string) => void\r\n    passwordHandler: (pass: string) => void\r\n    checkHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n    email: string\r\n    password: string\r\n    check: boolean\r\n    error: string\r\n}\r\n\r\nexport const Login = (props: LoginPropsType) => {\r\n\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n\r\n    return (\r\n        <div>\r\n            <h1>Authentication</h1>\r\n            <form className={s.registrationForm} onSubmit={(e) => e.preventDefault()}>\r\n                <EmailInput email={props.email} onChange={props.emailHandler}/>\r\n                <PassInput password={props.password} onChange={props.passwordHandler}/>\r\n                <div className={style.elementInput}>\r\n                    <span>Remember me</span>\r\n                    <input onChange={props.checkHandler} type=\"checkbox\" checked={props.check}/>\r\n                </div>\r\n                <Button name={\"Login\"} onClick={props.onSubmit} status={statusApp}/>\r\n                {props.error && <div style={{marginTop:\"170px\"}} className={s.error}>{props.error}</div>}\r\n            </form>\r\n            <ModalError/>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, userRequestData} from \"../api/authApi\";\r\nimport {onChangeAppStatusAC, OnChangeAppStatusActionType, setErrorAC, SetErrorActionType} from \"./app-Reducer\";\r\nimport {errHandlerInTC} from \"../utils/validations/errHandler\";\r\n\r\nexport const initialState: InitialStateType = {\r\n    userData: null,\r\n    isAuth: false,\r\n    loginSuccess: false,\r\n}\r\n\r\nconst AUTH_TRY = \"auth/AUTH_TRY\"\r\nconst LOGOUT = \"auth/LOGOUT\"\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype InitialStateType = {\r\n    userData: UserDataType | null,\r\n    isAuth: boolean,\r\n    loginSuccess: boolean,\r\n}\r\n\r\ntype ActionsType = authTryACType | logoutACType\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case AUTH_TRY:\r\n            return {\r\n                ...state,\r\n                userData: action.userData,\r\n                isAuth: action.isAuth\r\n            }\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                userData: null,\r\n                isAuth: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype authTryACType = {\r\n    type: typeof AUTH_TRY\r\n    userData: UserDataType\r\n    isAuth: boolean\r\n}\r\nexport const authTryAC = (userData: UserDataType, isAuth: boolean): authTryACType => ({\r\n    type: AUTH_TRY,\r\n    userData,\r\n    isAuth\r\n})\r\n\r\ntype logoutACType = {\r\n    type: typeof LOGOUT\r\n}\r\nexport const logoutAC = (): logoutACType => ({type: LOGOUT})\r\n\r\nexport const authenticationUserLoginTC = (data: userRequestData) =>\r\n    async (dispatch: Dispatch<ActionsType | OnChangeAppStatusActionType | SetErrorActionType>) => {\r\n        try {\r\n            dispatch(onChangeAppStatusAC(\"loading\"))\r\n            const res = await authAPI.userAuthorization(data)\r\n            if (res.data && !res.data.error) {\r\n                dispatch(authTryAC(res.data, true))\r\n                dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                dispatch(authTryAC(initialState.userData as any, false))\r\n                dispatch(onChangeAppStatusAC(\"failed\"))\r\n            }\r\n        } catch (err) {\r\n            errHandlerInTC(dispatch, err, onChangeAppStatusAC, setErrorAC)\r\n        }\r\n    }\r\n\r\nexport const meRequestTC = () => async (dispatch: Dispatch<OnChangeAppStatusActionType | authTryACType>) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        const res = await authAPI.meRequest()\r\n        dispatch(authTryAC(res.data, true))\r\n        dispatch(onChangeAppStatusAC(\"idle\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC)\r\n    }\r\n};\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch<OnChangeAppStatusActionType | logoutACType>) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await authAPI.logOut()\r\n        dispatch(logoutAC())\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC)\r\n    }\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Login} from \"./Login/Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {authenticationUserLoginTC} from \"../../store/auth-Reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {onChangeAppStatusAC, RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\n\r\nexport const LoginContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    let [email, setEmailText] = useState(\"\")\r\n    let [password, setPasswordText] = useState(\"\")\r\n    let [rememberMe, setRememberMe] = useState(false)\r\n    const [error, setError] = useState<string>(\"\")\r\n\r\n    const emailHandler = (email: string) =>{\r\n        setEmailText(email)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const passwordHandler = (pass: string) => {\r\n        setPasswordText(pass)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const checkHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(e.currentTarget.checked)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const onSubmit = () => {\r\n        if (email && password) {\r\n            if (!validations.emailValid(email)) {\r\n                dispatch(authenticationUserLoginTC({email, password, rememberMe}))\r\n            } else {\r\n                setError(\"incorrect email or password\")\r\n            }\r\n        } else {\r\n            setError(\"required email and password\")\r\n        }\r\n    }\r\n\r\n    if(isAuth) {\r\n        return <Redirect to={\"./profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Login\r\n            emailHandler={emailHandler}\r\n            checkHandler={checkHandler}\r\n            passwordHandler={passwordHandler}\r\n            email={email}\r\n            password={password}\r\n            check={rememberMe}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./PreloaderForNav.module.css\"\r\n\r\n\r\n\r\nexport const PreloaderForNav = () => {\r\n    return <div className={s.linePreloader}/>\r\n}","import React from \"react\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport styles from \"./Navigation.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {logoutTC} from \"../../store/auth-Reducer\";\r\nimport {onChangeAppStatusAC, RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {PreloaderForNav} from \"../preloaderForNav/PreloaderForNav\";\r\n\r\nexport const Navigations = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n\r\n    const authHandler = () => {\r\n        if (isAuth) {\r\n            dispatch(logoutTC())\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const text = isAuth ? \"/profile\" : \"/login\"\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.wrapper}>\r\n                <nav className={styles.navigation}>\r\n                    {/*<Link to={\"/\"}>Home</Link>*/}\r\n                    <Link to={\"/\"}>Profile</Link>\r\n                    <Link to={'/login'}>Login</Link>\r\n                    <Link to={'/registration'}>Registration</Link>\r\n                    {/*<Link to={'/new-password-page'}>New password</Link>*/}\r\n                    <Link to={'/password-recovery-page'}>Password recovery</Link>\r\n                    <Link to={'/test-page'}>Test page</Link>\r\n                    {/*<Link to={'/error404'}>Error 404</Link>*/}\r\n                    <Link to={'/packs'}>Packs</Link>\r\n                    <Link to={'/cards'}>Cards</Link>\r\n                </nav>\r\n                <NavLink to={text}>\r\n                    <button onClick={authHandler}>{isAuth ? \"Logout\" : \"Login\"}</button>\r\n                </NavLink>\r\n            </div>\r\n            {appStatus ===\"loading\" && <PreloaderForNav/>}\r\n        </div>\r\n    )\r\n}","import {instance} from \"./authApi\";\r\n\r\nexport type getCardPackParamsType = {\r\n    packName?: string,\r\n    min?: number,\r\n    max?: number,\r\n    sortPacks?: string,\r\n    page?: number,\r\n    pageCount?: number,\r\n    user_id?: string\r\n}\r\nexport type AddPackDataType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\nexport type UpdatePackDataType = {\r\n    _id: string\r\n    name?: string\r\n}\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: string\r\n    updated: string\r\n}\r\nexport type getCardPackResponseType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport const packsAPI = {\r\n    getCardPacks (data?: getCardPackParamsType) {\r\n        return instance.get<getCardPackResponseType>(`cards/pack`,{params: data})\r\n    },\r\n    addPack (data: AddPackDataType) {\r\n        return instance.post(`cards/pack`, {cardsPack: data})\r\n    },\r\n    deletePack (id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack (data: UpdatePackDataType) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    }\r\n}","import {\r\n    AddPackDataType, CardPackType, getCardPackParamsType, getCardPackResponseType, packsAPI, UpdatePackDataType\r\n} from \"../api/packs-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {onChangeAppStatusAC} from \"./app-Reducer\";\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionType = GetPacksReturnType | SetSearchValueType | setSortTypeActionType | setFilterPacksActionType\r\n\r\nconst GET_CARDS_PACKS = \"packs/GET-CARDS-PACKS\"\r\nconst SET_SEARCH_VALUE = \"packs/SET_SEARCH_VALUE\"\r\nconst SET_SORT_TYPE = \"packs/SET_SORT_TYPE\"\r\nconst SET_SORT_PACKS_ON_PAGE = \"packs/SET_SORT_PACKS_ON_PAGE\"\r\nexport const initialState = {\r\n    cardPacks: [] as Array<CardPackType>,\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 1000,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 15,\r\n    searchValue: \"\",\r\n    sortPacks: \"0updated\"\r\n}\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS_PACKS:\r\n            return {...state, ...action.data}\r\n        case SET_SEARCH_VALUE:\r\n            return {...state, searchValue: action.value}\r\n        case SET_SORT_TYPE:\r\n            return {...state, sortPacks:action.value}\r\n        case SET_SORT_PACKS_ON_PAGE:\r\n            let copyCardPacks = [...state.cardPacks]\r\n            const sortUp = (a:CardPackType,b:CardPackType)=>{\r\n                if (a.cardsCount > b.cardsCount) {\r\n                    return -1\r\n                } else {\r\n                    return 1\r\n                }\r\n            }\r\n            const sortDown = (a:CardPackType,b:CardPackType)=>{\r\n                if (a.cardsCount < b.cardsCount) {\r\n                    return -1\r\n                } else {\r\n                    return 1\r\n                }\r\n            }\r\n            let sortedCardPacks = copyCardPacks.sort(action.sortType === \"UP\" ? sortUp : sortDown)\r\n            return {...state, cardPacks: sortedCardPacks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getPacksAC = (data: getCardPackResponseType) => ({type: GET_CARDS_PACKS, data} as const)\r\ntype GetPacksReturnType = ReturnType<typeof getPacksAC>\r\n\r\nexport const setSearchValueAC = (value: string) => ({type: SET_SEARCH_VALUE, value} as const)\r\ntype SetSearchValueType = ReturnType<typeof setSearchValueAC>\r\n\r\nexport const setSortTypeAC = (value: string) => ({type: SET_SORT_TYPE, value} as const)\r\ntype setSortTypeActionType = ReturnType<typeof setSortTypeAC>\r\n\r\nexport const setFilterPacksAC = (sortType: \"UP\" | \"DOWN\") => ({type: SET_SORT_PACKS_ON_PAGE, sortType} as const)\r\ntype setFilterPacksActionType = ReturnType<typeof setFilterPacksAC>\r\n\r\nexport const getPacksTC = (data?: getCardPackParamsType) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const response = await packsAPI.getCardPacks({...data, sortPacks: params.sortPacks, pageCount: params.pageCount})\r\n    dispatch(getPacksAC(response.data))\r\n    dispatch(onChangeAppStatusAC(\"idle\"))\r\n}\r\n\r\nexport const addPackTC = (data: AddPackDataType) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    await packsAPI.addPack(data)\r\n    dispatch(getPacksTC({\r\n        page: params.page, pageCount: params.pageCount, max: params.maxCardsCount, min: params.minCardsCount,\r\n    }))\r\n}\r\n\r\nexport const delPackTC = (id: string) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    await packsAPI.deletePack(id)\r\n    dispatch(getPacksTC({\r\n        page: params.page, pageCount: params.pageCount, max: params.maxCardsCount, min: params.minCardsCount\r\n    }))\r\n}\r\n\r\nexport const updPackTC = (data: UpdatePackDataType) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    await packsAPI.updatePack(data)\r\n    dispatch(getPacksTC(\r\n        {\r\n            page: params.page, pageCount: params.pageCount, max: params.maxCardsCount, min: params.minCardsCount\r\n        }))\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    pagesCount: number\r\n    currentPage: number\r\n    paginatorSize: number\r\n    clickHandler: any\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n\r\n    const lastPagBlock = Math.ceil(props.pagesCount / props.paginatorSize)\r\n    const [currentPaginatorBlock, setCurrentPaginatorBlock] = useState<number>(0)\r\n\r\n    const Line: React.FC = () => {\r\n        const arr = []\r\n        for (let i = 1; i <= props.pagesCount; i++) {\r\n            arr.push(i)\r\n        }\r\n        return (\r\n            <div className={s.nums}>\r\n                {arr.map((p, i) => {\r\n                    if ((p >= currentPaginatorBlock * props.paginatorSize) && (p < currentPaginatorBlock * props.paginatorSize + props.paginatorSize)) {\r\n                        if ((p) === props.currentPage) {\r\n                            return <span key={i} className={s.currentNum}>{p}</span>\r\n                        } else {\r\n                            return <span onClick={() => props.clickHandler(p)} key={i}\r\n                                         className={s.num}>{p}</span>\r\n                        }\r\n                    } else {\r\n                        return null\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.main}>\r\n            <Line/>\r\n            <div className={s.btns}>\r\n                <div className={s.startButtons}>\r\n                    {(currentPaginatorBlock !== 0) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(0)}>to start</button>}\r\n                    {(currentPaginatorBlock !== 0) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(currentPaginatorBlock - 1)}>back</button>}\r\n                </div>\r\n                <div className={s.endButtons}>\r\n                    {(currentPaginatorBlock !== lastPagBlock - 1) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(currentPaginatorBlock + 1)}>next</button>}\r\n                    {(currentPaginatorBlock !== lastPagBlock - 1) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(lastPagBlock - 1)}>to end</button>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./PanelForPacks.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {getPacksTC, InitialStateType, setSearchValueAC, setSortTypeAC} from \"../../store/packs-Reducer\";\r\nimport {Paginator} from \"../paginator/Paginator\";\r\n\r\ntype TypeSelectValue = \"updated\" | \"name\" | \"cardsCount\"\r\ntype OrderSelectValueType = \"0\" | \"1\"\r\n\r\nexport const PanelForPacks = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const pack = useSelector<AppRootStateType, InitialStateType>(state => state.packs)\r\n    const searchValue = useSelector<AppRootStateType, string>(state => state.packs.searchValue)\r\n    const pagesCount = Math.ceil(pack.cardPacksTotalCount / pack.pageCount)\r\n    const [typeSelectValue, setTypeSelectValue] = useState<TypeSelectValue>(\"updated\")\r\n    const [orderSelectValue, setOrderSelectValue] = useState<OrderSelectValueType>(\"0\")\r\n\r\n    const changeOrderHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setOrderSelectValue(e.currentTarget.value as OrderSelectValueType)\r\n        dispatch(setSortTypeAC(`${orderSelectValue}${typeSelectValue}`))\r\n    }\r\n    const changeTypeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setTypeSelectValue(e.currentTarget.value as TypeSelectValue)\r\n        dispatch(setSortTypeAC(`${orderSelectValue}${typeSelectValue}`))\r\n    }\r\n    useEffect(() => {\r\n        if (pack.sortPacks !== `${orderSelectValue}${typeSelectValue}`)\r\n            dispatch(setSortTypeAC(`${orderSelectValue}${typeSelectValue}`))\r\n    }, [typeSelectValue, orderSelectValue])\r\n\r\n    return (\r\n        <div className={s.panel}>\r\n            <div className={s.search}>\r\n                <input value={searchValue} onChange={e => dispatch(setSearchValueAC(e.currentTarget.value))}/>\r\n                <button onClick={() => dispatch(getPacksTC({page: 1, packName: searchValue}))}>find</button>\r\n            </div>\r\n            <div>\r\n                Сортировать:\r\n                <select onChange={changeTypeHandler} value={typeSelectValue} name=\"\" id=\"\">\r\n                    <option value=\"updated\"> По дате обновления</option>\r\n                    <option value=\"name\">По имени</option>\r\n                    <option value=\"cardsCount\">По количеству карт</option>\r\n                </select>\r\n                <select onChange={changeOrderHandler} value={orderSelectValue} name=\"\" id=\"\">\r\n                    <option value={\"0\"}>По убыванию</option>\r\n                    <option value={\"1\"}>По возрастанию</option>\r\n                </select>\r\n                <button onClick={() => {\r\n                    dispatch(getPacksTC({sortPacks: `${orderSelectValue}${typeSelectValue}`}))\r\n                }}>Sort</button>\r\n            </div>\r\n            <div className={s.paginator}>\r\n                <Paginator clickHandler={(p: number) => dispatch(getPacksTC({page: p, packName: searchValue}))}\r\n                           paginatorSize={10} currentPage={pack.page} pagesCount={pagesCount}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport s from \"./Pack.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {CardPackType, UpdatePackDataType} from \"../../../api/packs-api\";\r\n\r\ntype CardPropsType = {\r\n    disabled: boolean\r\n    cp: CardPackType\r\n    updatePack: (c: UpdatePackDataType) => void\r\n    delPack: (id: string) => void\r\n}\r\n\r\nexport const Pack: React.FC<CardPropsType> = ({disabled, cp, updatePack, delPack}) => {\r\n\r\n    const splitUpdFunc = (cp: CardPackType) => {\r\n        const temp = cp.updated.split('.')\r\n        return temp[0].replace('T', ' ')\r\n    }\r\n    const [show, setShow] = useState(false)\r\n\r\n\r\n    return (\r\n        <div className={s.pack}>\r\n            <div className={s.name}>{cp.name}</div>\r\n            <div className={s.text}>{cp.cardsCount}</div>\r\n            <div className={s.text}>{splitUpdFunc(cp)}</div>\r\n            <div className={s.buttons}>\r\n                <button disabled={disabled} style={{margin: \"10px\"}}\r\n                        onClick={() => delPack(cp._id)}>delete\r\n                </button>\r\n                <button disabled={disabled} style={{margin: \"10px\"}}\r\n                        onClick={() => updatePack({_id: cp._id, name: \"Extra new\"})}>update\r\n                </button>\r\n                <button onClick={() => setShow(true)}>Cards</button>\r\n                {\r\n                    show && <div className={s.shadow} onClick={() => setShow(false)}>\r\n                        <div className={s.modal}>\r\n                            <NavLink to={`/cards/${cp._id}`} style={{margin: \"10px\"}}>Show Cards</NavLink>\r\n                            <NavLink to={`/learn-cards/${cp._id}`} style={{margin: \"10px\"}}>Learn Cards</NavLink>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {CardPackType, UpdatePackDataType} from \"../../api/packs-api\";\r\nimport s from \"./Packs.module.css\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {addPackTC, delPackTC, getPacksTC, setFilterPacksAC, updPackTC} from \"../../store/packs-Reducer\";\r\nimport {PanelForPacks} from \"../../common/panelForPacks/PanelForPacks\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {Pack} from \"./pack/Pack\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Packs = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.auth.userData?._id)\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs.cardPacks)\r\n    const [rend, setRend] = useState<number>(0)\r\n\r\n    const addPack = () => {\r\n        dispatch(addPackTC({name: \"New Pack\"}))\r\n    }\r\n    const delPack = (id: string) => {\r\n        dispatch(delPackTC(id))\r\n    }\r\n    const updatePack = (data: UpdatePackDataType) => {\r\n        dispatch(updPackTC(data))\r\n    }\r\n\r\n    if (statusApp !== \"loading\" && rend !== 1) {\r\n        setRend(1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (statusApp !== \"loading\" && isAuth) {\r\n            dispatch(getPacksTC())\r\n        }\r\n    }, [rend, dispatch, isAuth])\r\n\r\n    return (\r\n        <div>\r\n            <PanelForPacks/>\r\n            <div className={s.packsHeader}>\r\n                <div>Name</div>\r\n                <div>\r\n                    cardsCount\r\n                    <button onClick={() => dispatch(setFilterPacksAC(\"UP\"))}>Up</button>\r\n                    <button onClick={() => dispatch(setFilterPacksAC(\"DOWN\"))}>Down</button>\r\n                </div>\r\n                <div>Updated</div>\r\n                <div>\r\n                    <button style={{margin: \"10px\"}} onClick={addPack}>add</button>\r\n                </div>\r\n            </div>\r\n            {cardPacks.map((cp) => <Pack key={cp._id}\r\n                                         disabled={userId !== cp.user_id}\r\n                                         cp={cp} delPack={delPack}\r\n                                         updatePack={updatePack}/>)}\r\n        </div>\r\n    )\r\n}","import {instance} from \"./authApi\";\r\n\r\nexport type GetCardsParamsType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type AddCardDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type UpdateCardDataType = {\r\n    _id: string\r\n    question?: string\r\n    comments?: string\r\n}\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    shots: number\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    _id: string\r\n}\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type GradeType = 1|2|3|4|5\r\ntype updatedGradeType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: GradeType\r\n    shots: number\r\n}\r\ntype GradeCardResponseType = {\r\n    updatedGrade: updatedGradeType\r\n}\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards (data: GetCardsParamsType) {\r\n        return instance.get<GetCardsResponseType>(`cards/card`, {params: data})\r\n    },\r\n    addCard (data: AddCardDataType) {\r\n        return instance.post(`cards/card`, {card: data})\r\n    },\r\n    deleteCard (id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    updateCard (data: UpdateCardDataType) {\r\n        return instance.put(`cards/card`, {card: data})\r\n    },\r\n    gradeCard (grade: GradeType, card_id: string) {\r\n        return instance.put<GradeCardResponseType>(`cards/grade`, {grade, card_id})\r\n    }\r\n}","import {\r\n    AddCardDataType, cardsAPI, CardType, GetCardsParamsType, GetCardsResponseType, GradeType, UpdateCardDataType\r\n} from \"../api/cards-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {onChangeAppStatusAC} from \"./app-Reducer\";\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionType = getCardsReturnType | setCardGradeReturnType\r\n\r\nconst GET_CARDS = \"cards/GET-CARDS\"\r\nconst SET_CARD_GRADE = \"cards/SET-CARD-GRADE\"\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardType>,\r\n    cardsTotalCount: 0,\r\n    maxGrade: 10,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 1000,\r\n    packUserId: \"\"\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/GET-CARDS\":\r\n            return {...state, ...action.data}\r\n        case \"cards/SET-CARD-GRADE\":\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => c._id === action.id ? {...c, grade: action.grade, shots: action.shots} : c)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCards = (data: GetCardsResponseType) => ({type: GET_CARDS, data} as const)\r\ntype getCardsReturnType = ReturnType<typeof getCards>\r\n\r\nconst setCardGrade = (id: string, grade: GradeType, shots: number) => ({\r\n    type: SET_CARD_GRADE,\r\n    id,\r\n    grade,\r\n    shots\r\n} as const)\r\ntype setCardGradeReturnType = ReturnType<typeof setCardGrade>\r\n\r\nexport const getCardsTC = (data: GetCardsParamsType) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const params = getState().cards\r\n    const response = await cardsAPI.getCards(data)\r\n    dispatch(getCards({...response.data, pageCount: params.pageCount}))\r\n    dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n}\r\n\r\nexport const addCardTC = (data: AddCardDataType) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const state = getState().cards\r\n    await cardsAPI.addCard(data)\r\n    dispatch(getCardsTC({\r\n        cardsPack_id: data.cardsPack_id, max: state.maxGrade, min: state.minGrade, page: state.page,\r\n        pageCount: state.pageCount\r\n    }))\r\n    dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n}\r\n\r\nexport const delCardTC = (cardId: string, packId: string) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const state = getState().cards\r\n    await cardsAPI.deleteCard(cardId)\r\n    dispatch(getCardsTC({\r\n        cardsPack_id: packId, max: state.maxGrade, min: state.minGrade, page: state.page, pageCount: state.pageCount\r\n    }))\r\n    dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n}\r\n\r\nexport const updCardTC = (packId: string, data: UpdateCardDataType) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const state = getState().cards\r\n    await cardsAPI.updateCard(data)\r\n    dispatch(getCardsTC({\r\n        cardsPack_id: packId, max: state.maxGrade, min: state.minGrade, page: state.page, pageCount: state.pageCount\r\n    }))\r\n    dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n}\r\n\r\nexport const setCardGradeTC = (grade: GradeType, id: string) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const response = await cardsAPI.gradeCard(grade, id)\r\n    dispatch(setCardGrade(id, response.data.updatedGrade.grade, response.data.updatedGrade.shots))\r\n    dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n}","import React from \"react\";\r\nimport s from \"./Card.module.css\";\r\nimport {InitialStateType} from \"../../../store/cards-Reducer\";\r\n\r\ntype CardPropsType = {\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    updated: string\r\n    userId?: string\r\n    cardsState: InitialStateType\r\n    _id: string\r\n    cardsPack_id: string\r\n    deleteCard: (id: string, packId: string) => void\r\n    updateCard: (id: string) => void\r\n}\r\n\r\nexport const Card:React.FC<CardPropsType> = (props) => {\r\n\r\n    const splitUpdFunc = (str: string) => {\r\n        const temp = str.split('.')\r\n        return temp[0].replace('T', ' ')\r\n    }\r\n\r\n    return (\r\n        <div className={s.card}>\r\n            <div className={s.text}>{props.question}</div>\r\n            <div className={s.text}>{props.answer}</div>\r\n            <div className={s.text}>{props.grade}</div>\r\n            <div className={s.text}>{splitUpdFunc(props.updated)}</div>\r\n            <div className={s.buttons}>\r\n                <button disabled={props.userId !== props.cardsState.packUserId} style={{margin: \"10px\"}}\r\n                        onClick={() => props.deleteCard(props._id, props.cardsPack_id)}>Delete\r\n                </button>\r\n                <button disabled={props.userId !== props.cardsState.packUserId} style={{margin: \"10px\"}}\r\n                        onClick={() => props.updateCard(props._id)}>Update\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from \"./Cards.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {CardType} from \"../../api/cards-api\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {addCardTC, delCardTC, getCardsTC, InitialStateType, updCardTC} from \"../../store/cards-Reducer\";\r\nimport {Paginator} from \"../../common/paginator/Paginator\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {Card} from \"./Card/Card\";\r\n\r\nexport const Cards = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.auth.userData?._id)\r\n    const cardsState = useSelector<AppRootStateType, InitialStateType>(state => state.cards)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    const {id} = useParams<{ id?: string }>()\r\n    const [rend, setRend] = useState<number>(0)\r\n\r\n    const addCard = () => {\r\n        if (id) {\r\n            dispatch(addCardTC({cardsPack_id: id, answer: \"ans\", question: \"que\"}))\r\n        }\r\n    }\r\n    const deleteCard = (cardId: string, packId: string) => {\r\n        dispatch(delCardTC(cardId, packId))\r\n    }\r\n    const updateCard = (cardId: string) => {\r\n        if (id) {\r\n            dispatch(updCardTC(id, {_id: cardId, comments: \"new comment\", question: \"new que\"}))\r\n        }\r\n    }\r\n\r\n    if (statusApp !== \"loading\" && rend !== 1) {\r\n        setRend(1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id && statusApp !== \"loading\" && isAuth) {\r\n            dispatch(getCardsTC({cardsPack_id: id, pageCount: cardsState.pageCount}))\r\n        }\r\n    }, [rend, isAuth, dispatch, id, cardsState.pageCount])\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (<div>\r\n            <Paginator clickHandler={(n: number) => dispatch(getCardsTC({\r\n                page: n,\r\n                cardsPack_id: id,\r\n                pageCount: cardsState.pageCount\r\n            } as any))}\r\n                       paginatorSize={10} pagesCount={Math.ceil(cardsState.cardsTotalCount / cardsState.pageCount)}\r\n                       currentPage={cardsState.page}/>\r\n            <div className={s.cardsHeader}>\r\n                <div>Question</div>\r\n                <div>Answer</div>\r\n                <div>Grade</div>\r\n                <div>Updated</div>\r\n                <div>\r\n                    <button disabled={userId !== cardsState.packUserId} style={{margin: \"10px\"}} onClick={addCard}>Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {cards.map(c => <Card key={c._id} _id={c._id} answer={c.answer} cardsPack_id={c.cardsPack_id}\r\n                                  grade={c.grade} question={c.question} updated={c.updated} userId={userId}\r\n                                  updateCard={updateCard} deleteCard={deleteCard} cardsState={cardsState}/>)}\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {CardType, GradeType} from \"../../api/cards-api\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCardsTC, setCardGradeTC} from \"../../store/cards-Reducer\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\nimport s from \"./LearnCards.module.css\"\r\n\r\nexport const LearnCards = () => {\r\n\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const {id} = useParams<{ id: string }>()\r\n    const [first, setFirst] = useState(true)\r\n    const [show, setShow] = useState(false)\r\n    const [card, setCard] = useState<CardType>({\r\n        answer: \"\", question: \"\", cardsPack_id: \"\", grade: 0, shots: 0,\r\n        user_id: \"\", created: \"\", updated: \"\", _id: \"\"\r\n    })\r\n    const gradeArr: Array<GradeType> = [1, 2, 3, 4, 5]\r\n    const dispatch = useDispatch()\r\n    const getCard = (cards: CardType[]) => {\r\n        const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n        const rand = Math.random() * sum;\r\n        const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n                const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n                return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n            }\r\n            , {sum: 0, id: -1});\r\n        console.log('test: ', sum, rand, res)\r\n\r\n        return cards[res.id + 1];\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getCardsTC({cardsPack_id: id}))\r\n            setFirst(false)\r\n        }\r\n        if (cards.length > 0) {\r\n            setCard(getCard(cards))\r\n        }\r\n    }, [id, first, cards])\r\n\r\n    const setGrade = (grade: GradeType) => {\r\n        dispatch(setCardGradeTC(grade, card._id))\r\n        setShow(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.learnCards}>\r\n            <div className={s.container}>\r\n                <div className={s.cards}>\r\n                    <div>Question: {card.question}</div>\r\n                    <div>Answer: {show ? card.answer : <button onClick={() => setShow(true)}>Show Answer</button>}</div>\r\n                </div>\r\n                <div className={s.some}>\r\n                    {gradeArr.map(g => <button disabled={statusApp === \"loading\"}\r\n                                               onClick={() => setGrade(g)}>{g}</button>)}\r\n                </div>\r\n                <div className={s.some}>Shots: {card.shots}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Registration from \"./pages/registration/Registration\";\r\nimport Profile from \"./pages/profile/Profile\";\r\nimport NewPasswordPage from './pages/newPasswordPage/NewPasswordPage';\r\nimport PasswordRecoveryPage from './pages/passwordRecoveryPage/PasswordRecoveryPage';\r\nimport TestPage from \"./pages/testPage/TestPage\";\r\nimport Error404 from \"./pages/error404/Error404\";\r\nimport {LoginContainer} from \"./pages/login/LoginContainer\";\r\nimport {Navigations} from \"./common/Navigation/Navigation\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {meRequestTC} from \"./store/auth-Reducer\";\r\nimport {Packs} from \"./pages/Packs/Packs\";\r\nimport {Cards} from \"./pages/Cards/Cards\";\r\nimport {LearnCards} from \"./pages/LearnCards/LearnCards\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(meRequestTC())\r\n    },[])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navigations/>\r\n      <Switch>\r\n        <Route path={\"/profile\"} render={()=> <Profile/>}/>\r\n        <Route path={\"/login\"} render={()=><LoginContainer/>}/>\r\n        <Route path={\"/registration\"} render={()=><Registration/>}/>\r\n        <Route path={\"/new-password-page/:token\"} render={()=><NewPasswordPage/>}/>\r\n        <Route path={\"/password-recovery-page\"} render={()=><PasswordRecoveryPage/>}/>\r\n        <Route path={'/test-page'} render={ () => <TestPage/> }/>\r\n        <Route path={'/error404'} render={ () => <Error404/> }/>\r\n        <Route path={'/packs'} render={ () => <Packs/> }/>\r\n        <Route path={'/cards/:id?'} render={ () => <Cards/> }/>\r\n        <Route path={'/learn-cards/:id'} render={ () => <LearnCards/> }/>\r\n        <Redirect exact from={\"/\"} to={\"/profile\"}/>\r\n        <Redirect from={ '*' } to={'/error404'}/>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { appReducer } from \"./app-Reducer\";\r\nimport { authReducer } from \"./auth-Reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {regReducer} from \"./reg-Reducer\";\r\nimport { passwordRecoveryReducer } from \"./passwordRecovery-Reducer\";\r\nimport {packsReducer} from \"./packs-Reducer\";\r\nimport {cardsReducer} from \"./cards-Reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    pass: passwordRecoveryReducer,\r\n    reg: regReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\n// сразу добавляю middleware для использования redux-thunk\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}