{"version":3,"sources":["common/paginator/Paginator.module.css","pages/registration/Registration.module.css","common/Input.module.css","pages/common/c1-SuperInputText/SuperInputText.module.css","pages/common/c2-SuperButton/SuperButton.module.css","pages/common/c3-SuperCheckbox/SuperCheckbox.module.css","common/Navigation/Navigation.module.css","pages/Packs/Packs.module.css","common/panelForPacks/PanelForPacks.module.css","pages/Cards/Cards.module.css","pages/login/Login/Login.module.css","common/preloaderForNav/PreloaderForNav.module.css","api/registration-api.ts","store/app-Reducer.ts","utils/validations/errHandler.ts","store/reg-Reducer.ts","common/preloader/Preloader.tsx","utils/validations/validations.ts","common/EmailInput.tsx","common/PassInput.tsx","common/Button.tsx","pages/registration/Registration.tsx","pages/profile/Profile.tsx","api/PasswordRecoveryAPI.ts","store/passwordRecovery-Reducer.ts","pages/newPasswordPage/NewPasswordPage.tsx","pages/passwordRecoveryPage/PasswordRecoveryPage.tsx","pages/common/c1-SuperInputText/SuperInputText.tsx","pages/common/c2-SuperButton/SuperButton.tsx","pages/common/c3-SuperCheckbox/SuperCheckbox.tsx","pages/testPage/TestPage.tsx","pages/error404/Error404.tsx","pages/main/Main.tsx","pages/login/Login/Login.tsx","api/authApi.ts","store/auth-Reducer.ts","pages/login/LoginContainer.tsx","common/preloaderForNav/PreloaderForNav.tsx","common/Navigation/Navigation.tsx","api/packs-api.ts","store/packs-Reducer.ts","common/paginator/Paginator.tsx","common/panelForPacks/PanelForPacks.tsx","pages/Packs/Packs.tsx","api/cards-api.ts","store/cards-Reducer.ts","pages/Cards/Cards.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","common/preloader/Preloader.module.css"],"names":["module","exports","instance","axios","create","baseURL","regAPI","data","post","ON_CHANGE_APP_STATUS","initialState","appStatus","onChangeAppStatusAC","status","type","errHandlerInTC","dispatch","err","setAppStatusAC","setErrAC","response","error","message","succeedRegister","undefined","setErrorAC","Preloader","id","s","fountainG","fountainG_1","className","fountainG_2","fountainG_3","fountainG_4","fountainG_5","fountainG_6","fountainG_7","fountainG_8","validations","mail","test","pass","length","EmailInput","email","onChange","useState","emailErr","setEmailErr","onFocus","value","onBlur","trim","e","currentTarget","placeholder","inputErr","style","marginTop","PassInput","password","passwordErr","setPasswordErr","Button","name","onClick","disabled","cursor","Registration","useDispatch","useSelector","state","reg","statusApp","app","setEmail","setPassword","repeatPassword","setRepeatPassword","sendError","setSendError","to","registrationModule","registrationForm","onSubmit","preventDefault","color","a","Profile","profName","auth","userData","isAuth","withCredentials","passwordRecoveryAPI","from","token","resetPasswordToken","valueOfInputEmail","errorStatusForPassRec","errorStatusForNewPass","valueInputPass","valueInputPassRec","ON_CHANGE_INPUT_EMAIL","SET_ERROR_STATUS_FOR_PASS_REC","SET_ERROR_STATUS_FOR_NEW_PASS","ON_CHANGE_INPUT_PASS","ON_CHANGE_INPUT_PASS_REC","onChangeInputAC","setErrorStatusForPassRecAC","setErrorStatusForNewPassAC","onChangeInputPassAC","onChangeInputPassRecAC","NewPasswordPage","React","redirect","setRedirect","touchedPass","setTouchedPass","touchedPassRepeat","setTouchedPassRepeat","errorStatus","valuePass","passValid","valuePassRepeat","passRepeatValid","useParams","errorStylePass","border","errorStylePassRepeat","display","sendPassForNewPassTC","PasswordRecoveryPage","emailValid","SuperInputText","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","superInput","errorInput","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","lab","checked","TestPage","Error404","Main","flexDirection","Login","props","emailHandler","passwordHandler","elementInput","checkHandler","check","authAPI","delete","loginSuccess","AUTH_TRY","LOGOUT","authTryAC","LoginContainer","setEmailText","setPasswordText","rememberMe","setRememberMe","res","PreloaderForNav","linePreloader","Navigations","authorized","text","styles","container","wrapper","navigation","packsAPI","get","params","cardsPack","put","GET_CARDS_PACKS","SET_SEARCH_VALUE","SET_SORT_TYPE","SET_SORT_PACKS_ON_PAGE","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","searchValue","sortPacks","getPacksAC","setSortTypeAC","setFilterPacksAC","sortType","getPacksTC","getState","packs","Paginator","lastPagBlock","Math","ceil","pagesCount","paginatorSize","currentPaginatorBlock","setCurrentPaginatorBlock","Line","arr","i","push","nums","map","p","currentPage","currentNum","clickHandler","num","main","btns","startButtons","endButtons","PanelForPacks","pack","typeSelectValue","setTypeSelectValue","orderSelectValue","setOrderSelectValue","useEffect","panel","search","packName","paginator","Packs","userId","_id","rend","setRend","delPack","max","min","delPackTC","updatePack","updPackTC","packsHeader","margin","cp","width","cardsCount","created","updated","buttons","user_id","cardsAPI","card","cards","cardsTotalCount","maxGrade","minGrade","packUserId","getCardsTC","then","getCards","Cards","cardsState","deleteCard","cardId","packId","cardsPack_id","delCardTC","updateCard","comments","question","n","cardsHeader","answer","c","grade","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyCardPacks","sortUp","b","sortDown","sortedCardPacks","sort","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00da0ec1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Paginator_main__14XI_\",\"num\":\"Paginator_num__KQWJf\",\"currentNum\":\"Paginator_currentNum__2GKq0\",\"nums\":\"Paginator_nums__3Md42\",\"btns\":\"Paginator_btns__2WIA-\",\"startButtons\":\"Paginator_startButtons__1t93U\",\"endButtons\":\"Paginator_endButtons__3yIvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationModule\":\"Registration_registrationModule__4C-LG\",\"registrationForm\":\"Registration_registrationForm__3SkJI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputErr\":\"Input_inputErr__1IYV2\",\"error\":\"Input_error__a3_--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2wa_a\",\"errorInput\":\"SuperInputText_errorInput__3_ZWZ\",\"error\":\"SuperInputText_error__3jAp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2jDA_\",\"red\":\"SuperButton_red__O0154\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lab\":\"SuperCheckbox_lab__2Y2Hn\",\"checkbox\":\"SuperCheckbox_checkbox__3z_aH\",\"spanClassName\":\"SuperCheckbox_spanClassName__2WNVv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navigation_container__gi6HA\",\"wrapper\":\"Navigation_wrapper__2jaX7\",\"navigation\":\"Navigation_navigation___o7mt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsHeader\":\"Packs_packsHeader__3NTIe\",\"packs\":\"Packs_packs__3TOhW\",\"buttons\":\"Packs_buttons__1IYBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"PanelForPacks_panel__Ev1FB\",\"search\":\"PanelForPacks_search__2bCiB\",\"paginator\":\"PanelForPacks_paginator__2R2zq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsHeader\":\"Cards_cardsHeader__2mjGm\",\"cards\":\"Cards_cards__1p4x7\",\"buttons\":\"Cards_buttons__3fCey\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLogin\":\"Login_formLogin__1-aqV\",\"elementInput\":\"Login_elementInput__1IqxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"linePreloader\":\"PreloaderForNav_linePreloader__2K5f7\",\"scroll\":\"PreloaderForNav_scroll__15MHC\"};","import axios from \"axios\"\r\n\r\nexport type DataType = {\r\n    email: string\r\n    password: string\r\n}\r\ntype RegisterResponseType = {\r\n    addedUser: {}\r\n    error?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\"\r\n})\r\n\r\nexport const regAPI = {\r\n    register(data: DataType) {\r\n        return instance.post<RegisterResponseType>(\"auth/register\", data)\r\n    }\r\n}","const ON_CHANGE_APP_STATUS = \"App/ON_CHANGE_APP_STATUS\"\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    appStatus: 'loading' as RequestStatusType\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type OnChangeAppStatusActionType = {\r\n    type: typeof ON_CHANGE_APP_STATUS\r\n    status: RequestStatusType\r\n}\r\ntype ActionsType = OnChangeAppStatusActionType\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ON_CHANGE_APP_STATUS:\r\n            return {\r\n                ...state,\r\n                appStatus: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const onChangeAppStatusAC = (status:RequestStatusType):OnChangeAppStatusActionType => ({type: ON_CHANGE_APP_STATUS, status})\r\n\r\n\r\n","import {Dispatch} from \"redux\"\r\n\r\nexport function errHandlerInTC(dispatch: Dispatch<any>, err: any, setAppStatusAC: any, setErrAC?: any) {\r\n\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n    if (setErrAC) {\r\n        if (err.response) {\r\n            dispatch(setErrAC(err.response.data.error))\r\n        } else {\r\n            dispatch(setErrAC(err.message))\r\n        }\r\n    }\r\n}","import {DataType, regAPI} from \"../api/registration-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {onChangeAppStatusAC} from \"./app-Reducer\";\r\nimport {errHandlerInTC} from \"../utils/validations/errHandler\";\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = RegisterActionType | SetErrorActionType\r\n\r\nconst SET_REGISTER = \"reg/SET-REGISTER\"\r\nconst SET_ERROR = \"reg/SET-ERROR\"\r\n\r\nconst initialState = {\r\n    succeedRegister: false,\r\n    error: undefined as string | undefined\r\n}\r\n\r\nexport const regReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"reg/SET-REGISTER\":\r\n            return {...state, succeedRegister: action.succeedRegister}\r\n        case \"reg/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst registerAC = (succeedRegister: boolean) => {\r\n    return {\r\n        type: SET_REGISTER,\r\n        succeedRegister\r\n    } as const\r\n}\r\nexport const setErrorAC = (error: string) => {\r\n    return {\r\n        type: SET_ERROR,\r\n        error\r\n    } as const\r\n}\r\n\r\ntype RegisterActionType = ReturnType<typeof registerAC>\r\nexport type SetErrorActionType = ReturnType<typeof setErrorAC>\r\n\r\nexport const registerTC = (data: DataType) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await regAPI.register(data)\r\n        dispatch(registerAC(true))\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC, setErrorAC)\r\n    }\r\n}","import React from \"react\";\r\nimport s from \"./Preloader.module.css\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div id={s.fountainG}>\r\n            <div id={s.fountainG_1} className={s.fountainG}/>\r\n            <div id={s.fountainG_2} className={s.fountainG}/>\r\n            <div id={s.fountainG_3} className={s.fountainG}/>\r\n            <div id={s.fountainG_4} className={s.fountainG}/>\r\n            <div id={s.fountainG_5} className={s.fountainG}/>\r\n            <div id={s.fountainG_6} className={s.fountainG}/>\r\n            <div id={s.fountainG_7} className={s.fountainG}/>\r\n            <div id={s.fountainG_8} className={s.fountainG}/>\r\n        </div>\r\n    )\r\n}","export const validations = {\r\n    emailValid(mail: string) {\r\n        return (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(mail))\r\n    },\r\n    passValid(pass: string) {\r\n        return (pass.length < 8)\r\n    }\r\n}\r\n","import s from \"./Input.module.css\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {validations} from \"../utils/validations/validations\";\r\n\r\ntype EmailInputPropsType = {\r\n    email: string\r\n    onChange: (email: string) => void\r\n}\r\n\r\nexport const EmailInput: React.FC<EmailInputPropsType> = ({email, onChange}) => {\r\n\r\n    const [emailErr, setEmailErr] = useState<string>(\"\")\r\n\r\n    const onBlurEmail = () => {\r\n        if (email.trim() === \"\") {\r\n            setEmailErr('Email Required')\r\n            onChange(\"\")\r\n        }\r\n        if (email) {\r\n            if (validations.emailValid(email)) {\r\n                setEmailErr('Invalid email address')\r\n            } else {\r\n                setEmailErr('')\r\n            }\r\n        }\r\n    }\r\n    const onMailChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={emailErr && s.error} onFocus={() => setEmailErr('')} value={email}\r\n                   onBlur={onBlurEmail} onChange={onMailChangeHandler} placeholder=\"Email\" type={\"email\"}/>\r\n            {emailErr && <div className={s.inputErr} style={{marginTop: \"-3px\"}}>{emailErr}</div>}\r\n        </div>\r\n    )\r\n}","import s from \"./Input.module.css\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {validations} from \"../utils/validations/validations\";\r\n\r\ntype PassInputPropsType = {\r\n    password: string\r\n    onChange: (pass: string) => void\r\n}\r\n\r\nexport const PassInput: React.FC<PassInputPropsType> = ({password, onChange}) => {\r\n\r\n    const [passwordErr, setPasswordErr] = useState<string>(\"\")\r\n\r\n    const onBlurPass = () => {\r\n        if (password.trim() === \"\") {\r\n            setPasswordErr('Password Required')\r\n        }\r\n        if (password) {\r\n            if (validations.passValid(password)) {\r\n                setPasswordErr('Password must be more than 7 characters')\r\n            } else {\r\n                setPasswordErr('')\r\n            }\r\n        }\r\n    }\r\n    const onPassChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange(e.currentTarget.value.trim())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input className={passwordErr && s.error} onFocus={() => setPasswordErr('')} value={password}\r\n                   onBlur={onBlurPass} onChange={onPassChangeHandler} placeholder=\"Password\" type={\"password\"}/>\r\n            {passwordErr && <div className={s.inputErr} style={{marginTop: \"-3px\"}}>{passwordErr}</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {RequestStatusType} from \"../store/app-Reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    onClick: () => void\r\n    status: RequestStatusType\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({name, onClick, status}) => {\r\n    return (\r\n        <div>\r\n            <button disabled={status === \"loading\"} style={{cursor:\"pointer\"}} onClick={onClick}>{name}</button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport s from \"./Registration.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {registerTC} from \"../../store/reg-Reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {onChangeAppStatusAC, RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {EmailInput} from \"../../common/EmailInput\";\r\nimport {PassInput} from \"../../common/PassInput\";\r\nimport {Button} from \"../../common/Button\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\n\r\nconst Registration = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const succeedRegister = useSelector<AppRootStateType, boolean>(state => state.reg.succeedRegister)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const error = useSelector<AppRootStateType, string | undefined>(state => state.reg.error)\r\n    const [email, setEmail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const [repeatPassword, setRepeatPassword] = useState<string>(\"\")\r\n    const [sendError, setSendError] = useState<string>(\"\")\r\n\r\n    const onRepeatPassChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRepeatPassword(e.currentTarget.value)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const onButtonClick = () => {\r\n        if (email && password) {\r\n            if (password === repeatPassword && !validations.emailValid(email)) {\r\n                dispatch(registerTC({email, password}))\r\n            } else {\r\n                setSendError(\"incorrect email or password\")\r\n            }\r\n        } else {\r\n            setSendError(\"required email and password\")\r\n        }\r\n    }\r\n\r\n    if (succeedRegister) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.registrationModule}>\r\n            <h1>Registration</h1>\r\n            <form className={s.registrationForm} onSubmit={(e) => e.preventDefault()}>\r\n                <EmailInput email={email} onChange={setEmail}/>\r\n                <PassInput password={password} onChange={setPassword}/>\r\n                <input value={repeatPassword} onChange={onRepeatPassChangeHandler}\r\n                       placeholder=\"Repeat password\" type={\"password\"}/>\r\n                {password !== repeatPassword ? <div style={{color:\"red\"}}>Different Password</div> : \"\"}\r\n                <Button name={\"Register\"} onClick={onButtonClick} status={statusApp}/>\r\n                {sendError && <div style={{color:\"red\"}} >{sendError}</div>}\r\n                {error && <div style={{color:\"red\"}}>{error}</div>}\r\n                {statusApp ===\"loading\" && <Preloader/>}\r\n                <NavLink to={\"/login\"}>Sign in</NavLink>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\n\r\nconst Profile = () => {\r\n    const profName = useSelector<AppRootStateType, string | null>(state => state.auth.userData && state.auth.userData.name)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    if(!isAuth) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <h1>profile {profName}</h1>\r\n\r\n    )\r\n}\r\n\r\nexport default Profile","import axios from \"axios\";\r\n\r\nconst baseURL = \"https://neko-back.herokuapp.com/2.0/\"\r\n// const baseURLForLocal = \"http://localhost:7542/2.0/\"\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: baseURL,\r\n})\r\n// const instanceLoc = axios.create({\r\n//     withCredentials: true,\r\n//     baseURL: baseURLForLocal,\r\n// })\r\nexport const passwordRecoveryAPI = {\r\n    sendEmailForChangePassword(mail: string) {\r\n        return instance.post('auth/forgot', {\r\n            email: mail,\r\n            from: \"Fristail27  <Fristail27@gmail.com>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                            password recovery link: <a href='http://localhost:3000/Progect#/new-password-page/$token$'>link</a>\r\n                      </div>`\r\n        })\r\n    },\r\n    sendNewPassword (pass:string, token:string) {\r\n        return instance.post('auth/set-new-password', {\r\n            password: pass,\r\n            resetPasswordToken: token\r\n        })\r\n    }\r\n\r\n}","import {passwordRecoveryAPI} from \"../api/PasswordRecoveryAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {onChangeAppStatusAC, OnChangeAppStatusActionType} from \"./app-Reducer\";\r\nimport {errHandlerInTC} from \"../utils/validations/errHandler\";\r\n\r\nexport const initialState = {\r\n    valueOfInputEmail: \"\" as string,\r\n    errorStatusForPassRec: null as string | null,\r\n    errorStatusForNewPass: null as string | null,\r\n    valueInputPass: \"\" as string,\r\n    valueInputPassRec: \"\" as string,\r\n}\r\n\r\nconst ON_CHANGE_INPUT_EMAIL = \"passwordRecovery/ON_CHANGE_INPUT_EMAIL\"\r\nconst SET_ERROR_STATUS_FOR_PASS_REC = \"passwordRecovery/SET_ERROR_STATUS_FOR_PASS_REC\"\r\nconst SET_ERROR_STATUS_FOR_NEW_PASS = \"passwordRecovery/SET_ERROR_STATUS_FOR_NEW_PASS\"\r\nconst ON_CHANGE_INPUT_PASS = \"passwordRecovery/ON_CHANGE_INPUT_PASS\"\r\nconst ON_CHANGE_INPUT_PASS_REC = \"passwordRecovery/ON_CHANGE_INPUT_PASS_REC\"\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype OnChangeInputActionType = {\r\n    type: typeof ON_CHANGE_INPUT_EMAIL\r\n    value: string\r\n}\r\ntype SetErrorStatusForPassRecActionType = {\r\n    type: typeof SET_ERROR_STATUS_FOR_PASS_REC\r\n    error: string | null\r\n}\r\ntype SetErrorStatusForNewPassActionType = {\r\n    type: typeof SET_ERROR_STATUS_FOR_NEW_PASS\r\n    error: string | null\r\n}\r\ntype OnChangeInputPassActionType = {\r\n    type: typeof ON_CHANGE_INPUT_PASS\r\n    value: string\r\n}\r\ntype onChangeInputPassRecActionType = {\r\n    type: typeof ON_CHANGE_INPUT_PASS_REC\r\n    value: string\r\n}\r\ntype ActionsType =\r\n    OnChangeInputActionType\r\n    | SetErrorStatusForPassRecActionType\r\n    | SetErrorStatusForNewPassActionType\r\n    | OnChangeInputPassActionType\r\n    | onChangeInputPassRecActionType\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ON_CHANGE_INPUT_EMAIL:\r\n            return {\r\n                ...state,\r\n                valueOfInputEmail: action.value\r\n            }\r\n        case SET_ERROR_STATUS_FOR_PASS_REC:\r\n            return {\r\n                ...state,\r\n                errorStatusForPassRec: action.error\r\n            }\r\n        case SET_ERROR_STATUS_FOR_NEW_PASS:\r\n            return {\r\n                ...state,\r\n                errorStatusForNewPass: action.error\r\n            }\r\n        case ON_CHANGE_INPUT_PASS:\r\n            return {\r\n                ...state,\r\n                valueInputPass: action.value\r\n            }\r\n        case ON_CHANGE_INPUT_PASS_REC:\r\n            return {\r\n                ...state,\r\n                valueInputPassRec: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const onChangeInputAC = (value: string): OnChangeInputActionType => ({type: ON_CHANGE_INPUT_EMAIL, value})\r\nexport const setErrorStatusForPassRecAC = (error: string | null): SetErrorStatusForPassRecActionType => ({\r\n    type: SET_ERROR_STATUS_FOR_PASS_REC,\r\n    error\r\n})\r\nexport const setErrorStatusForNewPassAC = (error: string | null): SetErrorStatusForNewPassActionType => ({\r\n    type: SET_ERROR_STATUS_FOR_NEW_PASS,\r\n    error\r\n})\r\nexport const onChangeInputPassAC = (value: string): OnChangeInputPassActionType => ({type: ON_CHANGE_INPUT_PASS, value})\r\nexport const onChangeInputPassRecAC = (value: string): onChangeInputPassRecActionType => ({\r\n    type: ON_CHANGE_INPUT_PASS_REC,\r\n    value\r\n})\r\n\r\n//thunks\r\nexport const sendEmailForRecoveryPassTC = (mail: string) => async (dispatch: Dispatch<OnChangeInputActionType | SetErrorStatusForPassRecActionType | OnChangeAppStatusActionType>) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await passwordRecoveryAPI.sendEmailForChangePassword(mail)\r\n        dispatch(onChangeInputAC(\"\"))\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC, setErrorStatusForPassRecAC)\r\n    }\r\n}\r\nexport const sendPassForNewPassTC = (pass: string, token: string) => async (dispatch: Dispatch<\r\n    OnChangeInputPassActionType |\r\n    onChangeInputPassRecActionType |\r\n    SetErrorStatusForNewPassActionType |\r\n    OnChangeAppStatusActionType>\r\n) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await passwordRecoveryAPI.sendNewPassword(pass, token)\r\n        dispatch(onChangeInputPassAC(\"\"))\r\n        dispatch(onChangeInputPassRecAC(\"\"))\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC,setErrorStatusForNewPassAC)\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {\r\n    onChangeInputPassAC,\r\n    onChangeInputPassRecAC,\r\n    sendPassForNewPassTC,\r\n    setErrorStatusForNewPassAC\r\n} from \"../../store/passwordRecovery-Reducer\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\nimport {onChangeAppStatusAC} from \"../../store/app-Reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\n\r\nconst NewPasswordPage:React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [redirect, setRedirect] = React.useState<boolean>(false)\r\n    const [touchedPass, setTouchedPass] = React.useState<boolean>(false)\r\n    const [touchedPassRepeat, setTouchedPassRepeat] = React.useState<boolean>(false)\r\n    const errorStatus = useSelector<AppRootStateType, string | null>(state => state.pass.errorStatusForNewPass)\r\n    const valuePass = useSelector<AppRootStateType, string>(state => state.pass.valueInputPass)\r\n    const passValid = validations.passValid(valuePass)\r\n    const valuePassRepeat = useSelector<AppRootStateType, string>(state => state.pass.valueInputPassRec)\r\n    const passRepeatValid = validations.passValid(valuePassRepeat)\r\n    const statusApp = useSelector<AppRootStateType, string>(state => state.app.appStatus)\r\n    const {token} = useParams<{ token?: string }>();\r\n\r\n    const onChangeHandlerPass = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (errorStatus) {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n        if (touchedPass || touchedPassRepeat) {\r\n            setTouchedPass(false)\r\n            setTouchedPassRepeat(false)\r\n        }\r\n        dispatch(onChangeInputPassAC(e.currentTarget.value))\r\n    }\r\n    const onChangeHandlerPassRepeat = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (errorStatus) {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n        if (touchedPass || touchedPassRepeat) {\r\n            setTouchedPass(false)\r\n            setTouchedPassRepeat(false)\r\n        }\r\n        dispatch(onChangeInputPassRecAC(e.currentTarget.value))\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        if (valuePass !== valuePassRepeat) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Пароли не совпадают\"))\r\n        } else if (validations.passValid(valuePass)) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Длина пароля должна быть больше 7 символов\"))\r\n        } else {\r\n            if (token) {\r\n                dispatch(sendPassForNewPassTC(valuePass, token))\r\n            }\r\n            if (statusApp === \"succeeded\") {\r\n                setRedirect(true)\r\n                dispatch(onChangeAppStatusAC(\"idle\"))\r\n            }\r\n        }\r\n    }\r\n    const errorStylePass = (passValid && touchedPass) ? {border: \"2px solid red\"} : {}\r\n    const errorStylePassRepeat = (passRepeatValid && touchedPassRepeat) ? {border: \"2px solid red\"} : {}\r\n\r\n    const onBlurHandlerPass = () => {\r\n        if (passValid) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Некоректный пароль\"))\r\n            setTouchedPass(true)\r\n            setTouchedPassRepeat(true)\r\n        } else {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n    }\r\n    const onBlurHandlerPassRepeat = () => {\r\n        if (passRepeatValid) {\r\n            dispatch(setErrorStatusForNewPassAC(\"Некоректный пароль\"))\r\n            setTouchedPass(true)\r\n            setTouchedPassRepeat(true)\r\n        } else {\r\n            dispatch(setErrorStatusForNewPassAC(null))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {redirect && <Redirect to={\"/login\"}/>}\r\n            <h1>New Password Page</h1>\r\n            <label style={{display: \"block\"}}><input onBlur={onBlurHandlerPass} onFocus={() => setTouchedPass(true)}\r\n                                                     style={errorStylePass} value={valuePass}\r\n                                                     onChange={onChangeHandlerPass} type=\"text\"/>Password</label>\r\n            <label style={{display: \"block\"}}><input onBlur={onBlurHandlerPassRepeat}\r\n                                                     onFocus={() => setTouchedPassRepeat(true)}\r\n                                                     style={errorStylePassRepeat} value={valuePassRepeat}\r\n                                                     onChange={onChangeHandlerPassRepeat} type=\"text\"/>repeat Password</label>\r\n            {errorStatus && <span style={{color: \"red\"}}>{errorStatus}</span>}\r\n            <button disabled={statusApp === \"loading\"} onClick={clickHandler}>Change Pass</button>\r\n            {statusApp ===\"loading\" && <Preloader/>}\r\n            {statusApp === \"succeeded\" && <span style={{color:\"green\"}}>{statusApp}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPasswordPage","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {onChangeInputAC, sendEmailForRecoveryPassTC, setErrorStatusForPassRecAC} from \"../../store/passwordRecovery-Reducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {EmailInput} from \"../../common/EmailInput\";\r\nimport {Button} from \"../../common/Button\";\r\nimport s from \"../registration/Registration.module.css\";\r\nimport {validations} from \"../../utils/validations/validations\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\n\r\n\r\nconst PasswordRecoveryPage = () => {\r\n    const dispatch = useDispatch()\r\n    const value = useSelector<AppRootStateType, string>(state => state.pass.valueOfInputEmail)\r\n    const emailValid =  validations.emailValid(value)\r\n    const errorStatus = useSelector<AppRootStateType, string|null>(state => state.pass.errorStatusForPassRec)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n\r\n    const clickHandler = ()=> {\r\n        emailValid\r\n            ? dispatch(setErrorStatusForPassRecAC(\"Некоректный Email\"))\r\n            : dispatch(sendEmailForRecoveryPassTC(value))\r\n    }\r\n    const onChangeHandler = (email: string) => {\r\n        dispatch(onChangeInputAC(email))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Password Recovery Page</h1>\r\n            <form className={s.registrationForm} onSubmit={(e) => e.preventDefault()}>\r\n                <EmailInput email={value} onChange={onChangeHandler}/>\r\n                <Button name={\"Send email\"} onClick={clickHandler} status={statusApp}/>\r\n                {errorStatus && <p style={{color:\"red\"}}>{errorStatus}</p>}\r\n            </form>\r\n            {statusApp ===\"loading\" && <Preloader/>}\r\n            {statusApp === \"succeeded\" && <span style={{color:\"green\"}}>{statusApp}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordRecoveryPage\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : \"\" } `; // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = ` ${s.default} ${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked :boolean) => void,\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label className={s.lab}>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <div className={s.spanClassName}>{children}</div>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React from \"react\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport { Preloader } from \"../../common/preloader/Preloader\";\r\n\r\n\r\nconst TestPage = () => {\r\n    return (\r\n        <>\r\n            <SuperInputText/>\r\n            <SuperButton children={\"TEST\"} />\r\n            <SuperCheckbox children={\"TEST\"}/>\r\n            <Preloader/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestPage","import React from \"react\";\r\n\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <h1>Error404: Page not found</h1>\r\n    )\r\n}\r\n\r\nexport default Error404\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div style={{display:\"flex\", flexDirection:\"column\"}}>\r\n            <NavLink to={'/login'}>Login</NavLink>\r\n            <NavLink to={'/registration'}>registration</NavLink>\r\n            <NavLink to={'/new-password-page'}>new-password-page</NavLink>\r\n            <NavLink to={'/password-recovery-page'}>password-recovery-page</NavLink>\r\n            <NavLink to={'/test-page'}>test-page</NavLink>\r\n            <NavLink to={'/error404'}>error404</NavLink>\r\n            <NavLink to={'/packs'}>Packs</NavLink>\r\n            <NavLink to={'/cards'}>Cards</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import React, {ChangeEvent} from \"react\";\r\nimport style from \"./Login.module.css\"\r\nimport s from \"../../registration/Registration.module.css\";\r\nimport {EmailInput} from \"../../../common/EmailInput\";\r\nimport {PassInput} from \"../../../common/PassInput\";\r\nimport {Button} from \"../../../common/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {RequestStatusType} from \"../../../store/app-Reducer\";\r\n\r\ntype LoginPropsType = {\r\n    emailHandler: (email: string) => void\r\n    passwordHandler: (pass: string) => void\r\n    checkHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n    email: string\r\n    password: string\r\n    check: boolean\r\n    error: string|undefined\r\n}\r\n\r\nexport const Login = (props: LoginPropsType) => {\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    return (\r\n        <div>\r\n            <h1>Authentication</h1>\r\n            <form className={s.registrationForm} onSubmit={(e) => e.preventDefault()}>\r\n                <EmailInput email={props.email} onChange={props.emailHandler}/>\r\n                <PassInput password={props.password} onChange={props.passwordHandler}/>\r\n                <div className={style.elementInput}>\r\n                    <span>Remember me</span>\r\n                    <input onChange={props.checkHandler} type=\"checkbox\" checked={props.check}/>\r\n                </div>\r\n                <Button name={\"Login\"} onClick={props.onSubmit} status={statusApp}/>\r\n                {props.error && <div style={{color:\"red\"}}>{props.error}</div>}\r\n                {statusApp === \"loading\" && <Preloader/>}\r\n            </form>\r\n        </div>\r\n    )\r\n}","import axios from 'axios'\r\nimport {UserDataType} from \"../store/auth-Reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nexport type userRequestData = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nlet instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    ...settings\r\n})\r\n\r\nexport const authAPI = {\r\n    userAuthorization(data: userRequestData) {\r\n        return instance.post<UserDataType>(\"auth/login\", data)\r\n    },\r\n    meRequest () {\r\n        return instance.post('auth/me',{})\r\n    },\r\n    logOut () {\r\n        return instance.delete('auth/me',{})\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, userRequestData} from \"../api/authApi\";\r\nimport {onChangeAppStatusAC, OnChangeAppStatusActionType} from \"./app-Reducer\";\r\nimport {setErrorAC, SetErrorActionType} from \"./reg-Reducer\";\r\nimport {errHandlerInTC} from \"../utils/validations/errHandler\";\r\n\r\nexport const initialState: InitialStateType = {\r\n    userData: null,\r\n    isAuth: false,\r\n    loginSuccess: false,\r\n}\r\n\r\nconst AUTH_TRY = \"auth/AUTH_TRY\"\r\nconst LOGOUT = \"auth/LOGOUT\"\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype InitialStateType = {\r\n    userData: UserDataType | null,\r\n    isAuth: boolean,\r\n    loginSuccess: boolean,\r\n}\r\n\r\ntype ActionsType = authTryACType | SetErrorActionType | logoutACType\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case AUTH_TRY:\r\n            return {\r\n                ...state,\r\n                userData: action.userData,\r\n                isAuth: action.isAuth\r\n            }\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                userData: null,\r\n                isAuth: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype authTryACType = {\r\n    type: typeof AUTH_TRY\r\n    userData: UserDataType\r\n    isAuth: boolean\r\n}\r\nexport const authTryAC = (userData: UserDataType, isAuth: boolean): authTryACType => ({\r\n    type: AUTH_TRY,\r\n    userData,\r\n    isAuth\r\n})\r\n\r\ntype logoutACType = {\r\n    type: typeof LOGOUT\r\n}\r\nexport const logoutAC = (): logoutACType => ({type: LOGOUT})\r\n\r\nexport const authenticationUserLoginTC = (data: userRequestData) =>\r\n    async (dispatch: Dispatch<ActionsType | OnChangeAppStatusActionType | SetErrorActionType>) => {\r\n        try {\r\n            dispatch(onChangeAppStatusAC(\"loading\"))\r\n            const res = await authAPI.userAuthorization(data)\r\n            if (res.data && !res.data.error) {\r\n                dispatch(authTryAC(res.data, true))\r\n                dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                dispatch(authTryAC(initialState.userData as any, false))\r\n                dispatch(onChangeAppStatusAC(\"failed\"))\r\n            }\r\n        } catch (err) {\r\n            errHandlerInTC(dispatch, err, onChangeAppStatusAC, setErrorAC)\r\n        }\r\n    }\r\n\r\nexport const meRequestTC = () => async (dispatch: Dispatch<OnChangeAppStatusActionType | authTryACType>) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        const res = await authAPI.meRequest()\r\n        dispatch(authTryAC(res.data, true))\r\n        dispatch(onChangeAppStatusAC(\"idle\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC)\r\n    }\r\n};\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch<OnChangeAppStatusActionType | logoutACType>) => {\r\n    try {\r\n        dispatch(onChangeAppStatusAC(\"loading\"))\r\n        await authAPI.logOut()\r\n        dispatch(logoutAC())\r\n        dispatch(onChangeAppStatusAC(\"succeeded\"))\r\n    } catch (err) {\r\n        errHandlerInTC(dispatch, err, onChangeAppStatusAC)\r\n    }\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Login} from \"./Login/Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {authenticationUserLoginTC} from \"../../store/auth-Reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {onChangeAppStatusAC, RequestStatusType} from \"../../store/app-Reducer\";\r\n\r\nexport const LoginContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const error = useSelector<AppRootStateType, string|undefined>(state => state.reg.error)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    let [email, setEmailText] = useState(\"\")\r\n    let [password, setPasswordText] = useState(\"\")\r\n    let [rememberMe, setRememberMe] = useState(false)\r\n\r\n    const emailHandler = (email: string) =>{\r\n        setEmailText(email)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const passwordHandler = (pass: string) => {\r\n        setPasswordText(pass)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const checkHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(e.currentTarget.checked)\r\n        if (statusApp !== \"idle\") {\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(authenticationUserLoginTC({email, password, rememberMe}))\r\n    }\r\n    if(isAuth) {\r\n        return <Redirect to={\"./profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <Login\r\n            emailHandler={emailHandler}\r\n            checkHandler={checkHandler}\r\n            passwordHandler={passwordHandler}\r\n            email={email}\r\n            password={password}\r\n            check={rememberMe}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./PreloaderForNav.module.css\"\r\n\r\n\r\n\r\nexport const PreloaderForNav = () => {\r\n    return <div className={s.linePreloader}/>\r\n}","import React from \"react\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport styles from \"./Navigation.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {logoutTC} from \"../../store/auth-Reducer\";\r\nimport {onChangeAppStatusAC, RequestStatusType} from \"../../store/app-Reducer\";\r\nimport {PreloaderForNav} from \"../preloaderForNav/PreloaderForNav\";\r\n\r\nexport const Navigations = () => {\r\n    const dispatch = useDispatch()\r\n    const authorized = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const authHandler = () => {\r\n        if (authorized) {\r\n            dispatch(logoutTC())\r\n            dispatch(onChangeAppStatusAC(\"idle\"))\r\n        }\r\n    }\r\n    const text = authorized ? \"/\" : \"/login\"\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.wrapper}>\r\n                <nav className={styles.navigation}>\r\n                    <Link to={\"/\"}>Home</Link>\r\n                    <Link to={\"/profile\"}>Profile</Link>\r\n                </nav>\r\n                <NavLink to={text}>\r\n                    <button onClick={authHandler}>{authorized ? <span>Logout</span> : <span>Login</span>}</button>\r\n                </NavLink>\r\n            </div>\r\n            {statusApp ===\"loading\" && <PreloaderForNav/>}\r\n        </div>\r\n    )\r\n}","import axios from \"axios\"\r\n\r\nexport type getCardPackParamsType = {\r\n    packName?: string,\r\n    min?: number,\r\n    max?: number,\r\n    sortPacks?: string,\r\n    page?: number,\r\n    pageCount?: number,\r\n    user_id?: string\r\n}\r\nexport type AddPackDataType = {\r\n    name?: string\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\nexport type UpdatePackDataType = {\r\n    _id: string\r\n    name?: string\r\n}\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: string\r\n    updated: string\r\n}\r\nexport type getCardPackResponseType = {\r\n    cardPacks: Array<CardPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true\r\n})\r\n\r\nexport const packsAPI = {\r\n    getCardPacks (data?: getCardPackParamsType) {\r\n        return instance.get<getCardPackResponseType>(`cards/pack`,{params: data})\r\n    },\r\n    addPack (data: AddPackDataType) {\r\n        return instance.post(`cards/pack`, {cardsPack: data})\r\n    },\r\n    deletePack (id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n    },\r\n    updatePack (data: UpdatePackDataType) {\r\n        return instance.put(`cards/pack`, {cardsPack: data})\r\n    }\r\n}","import {\r\n    AddPackDataType, CardPackType, getCardPackParamsType, getCardPackResponseType, packsAPI, UpdatePackDataType\r\n} from \"../api/packs-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {onChangeAppStatusAC} from \"./app-Reducer\";\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionType = GetPacksReturnType | SetSearchValueType | setSortTypeActionType | setFilterPacksActionType\r\n\r\nconst GET_CARDS_PACKS = \"packs/GET-CARDS-PACKS\"\r\nconst SET_SEARCH_VALUE = \"packs/SET_SEARCH_VALUE\"\r\nconst SET_SORT_TYPE = \"packs/SET_SORT_TYPE\"\r\nconst SET_SORT_PACKS_ON_PAGE = \"packs/SET_SORT_PACKS_ON_PAGE\"\r\nexport const initialState = {\r\n    cardPacks: [] as Array<CardPackType>,\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 1000,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    searchValue: \"\",\r\n    sortPacks: \"0updated\"\r\n}\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS_PACKS:\r\n            return {...state, ...action.data}\r\n        case SET_SEARCH_VALUE:\r\n            return {...state, searchValue: action.value}\r\n        case SET_SORT_TYPE:\r\n            return {...state, sortPacks:action.value}\r\n        case SET_SORT_PACKS_ON_PAGE:\r\n            let copyCardPacks = [...state.cardPacks]\r\n            const sortUp = (a:CardPackType,b:CardPackType)=>{\r\n                if (a.cardsCount > b.cardsCount) {\r\n                    return -1\r\n                } else {\r\n                    return 1\r\n                }\r\n            }\r\n            const sortDown = (a:CardPackType,b:CardPackType)=>{\r\n                if (a.cardsCount < b.cardsCount) {\r\n                    return -1\r\n                } else {\r\n                    return 1\r\n                }\r\n            }\r\n            let sortedCardPacks = copyCardPacks.sort(action.sortType === \"UP\" ? sortUp : sortDown)\r\n            return {...state, cardPacks: sortedCardPacks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getPacksAC = (data: getCardPackResponseType) => ({type: GET_CARDS_PACKS, data} as const)\r\ntype GetPacksReturnType = ReturnType<typeof getPacksAC>\r\n\r\nexport const setSearchValueAC = (value: string) => ({type: SET_SEARCH_VALUE, value} as const)\r\ntype SetSearchValueType = ReturnType<typeof setSearchValueAC>\r\n\r\nexport const setSortTypeAC = (value: string) => ({type: SET_SORT_TYPE, value} as const)\r\ntype setSortTypeActionType = ReturnType<typeof setSortTypeAC>\r\n\r\nexport const setFilterPacksAC = (sortType: \"UP\" | \"DOWN\") => ({type: SET_SORT_PACKS_ON_PAGE, sortType} as const)\r\ntype setFilterPacksActionType = ReturnType<typeof setFilterPacksAC>\r\n\r\nexport const getPacksTC = (data?: getCardPackParamsType) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    dispatch(onChangeAppStatusAC(\"loading\"))\r\n    const response = await packsAPI.getCardPacks({...data, sortPacks: params.sortPacks, pageCount: params.pageCount})\r\n    dispatch(getPacksAC(response.data))\r\n    dispatch(onChangeAppStatusAC(\"idle\"))\r\n}\r\n\r\nexport const addPackTC = (data: AddPackDataType) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    await packsAPI.addPack(data)\r\n    dispatch(getPacksTC({\r\n        page: params.page, pageCount: params.pageCount, max: params.maxCardsCount, min: params.minCardsCount,\r\n    }))\r\n}\r\n\r\nexport const delPackTC = (id: string) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    await packsAPI.deletePack(id)\r\n    dispatch(getPacksTC({\r\n        page: params.page, pageCount: params.pageCount, max: params.maxCardsCount, min: params.minCardsCount\r\n    }))\r\n}\r\n\r\nexport const updPackTC = (data: UpdatePackDataType) => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const params = getState().packs\r\n    await packsAPI.updatePack(data)\r\n    dispatch(getPacksTC(\r\n        {\r\n            page: params.page, pageCount: params.pageCount, max: params.maxCardsCount, min: params.minCardsCount\r\n        }))\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    pagesCount: number\r\n    currentPage: number\r\n    paginatorSize: number\r\n    clickHandler: any\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n\r\n    const lastPagBlock = Math.ceil(props.pagesCount / props.paginatorSize)\r\n    const [currentPaginatorBlock, setCurrentPaginatorBlock] = useState<number>(0)\r\n\r\n    const Line: React.FC = () => {\r\n        const arr = []\r\n        for (let i = 1; i <= props.pagesCount; i++) {\r\n            arr.push(i)\r\n        }\r\n        return (\r\n            <div className={s.nums}>\r\n                {arr.map((p, i) => {\r\n                    if ((p >= currentPaginatorBlock * props.paginatorSize) && (p < currentPaginatorBlock * props.paginatorSize + props.paginatorSize)) {\r\n                        if ((p) === props.currentPage) {\r\n                            return <span key={i} className={s.currentNum}>{p}</span>\r\n                        } else {\r\n                            return <span onClick={() => props.clickHandler(p)} key={i}\r\n                                         className={s.num}>{p}</span>\r\n                        }\r\n                    } else {\r\n                        return null\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.main}>\r\n            <Line/>\r\n            <div className={s.btns}>\r\n                <div className={s.startButtons}>\r\n                    {(currentPaginatorBlock !== 0) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(0)}>to start</button>}\r\n                    {(currentPaginatorBlock !== 0) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(currentPaginatorBlock - 1)}>back</button>}\r\n                </div>\r\n                <div className={s.endButtons}>\r\n                    {(currentPaginatorBlock !== lastPagBlock - 1) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(currentPaginatorBlock + 1)}>next</button>}\r\n                    {(currentPaginatorBlock !== lastPagBlock - 1) &&\r\n                    <button onClick={() => setCurrentPaginatorBlock(lastPagBlock - 1)}>to end</button>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./PanelForPacks.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {getPacksTC, InitialStateType, setSearchValueAC, setSortTypeAC} from \"../../store/packs-Reducer\";\r\nimport {Paginator} from \"../paginator/Paginator\";\r\n\r\ntype TypeSelectValue = \"updated\" | \"name\" | \"cardsCount\"\r\ntype OrderSelectValueType = \"0\" | \"1\"\r\n\r\nexport const PanelForPacks = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const pack = useSelector<AppRootStateType, InitialStateType>(state => state.packs)\r\n    const searchValue = useSelector<AppRootStateType, string>(state => state.packs.searchValue)\r\n    const pagesCount = Math.ceil(pack.cardPacksTotalCount / pack.pageCount)\r\n    const [typeSelectValue, setTypeSelectValue] = useState<TypeSelectValue>(\"updated\")\r\n    const [orderSelectValue, setOrderSelectValue] = useState<OrderSelectValueType>(\"0\")\r\n\r\n    const changeOrderHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setOrderSelectValue(e.currentTarget.value as OrderSelectValueType)\r\n        dispatch(setSortTypeAC(`${orderSelectValue}${typeSelectValue}`))\r\n    }\r\n    const changeTypeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setTypeSelectValue(e.currentTarget.value as TypeSelectValue)\r\n        dispatch(setSortTypeAC(`${orderSelectValue}${typeSelectValue}`))\r\n    }\r\n    useEffect(() => {\r\n        if (pack.sortPacks !== `${orderSelectValue}${typeSelectValue}`)\r\n            dispatch(setSortTypeAC(`${orderSelectValue}${typeSelectValue}`))\r\n    }, [typeSelectValue, orderSelectValue])\r\n\r\n    return (\r\n        <div className={s.panel}>\r\n            <div className={s.search}>\r\n                <input value={searchValue} onChange={e => dispatch(setSearchValueAC(e.currentTarget.value))}/>\r\n                <button onClick={() => dispatch(getPacksTC({page: 1, packName: searchValue}))}>find</button>\r\n            </div>\r\n            <div>\r\n                Сортировать:\r\n                <select onChange={changeTypeHandler} value={typeSelectValue} name=\"\" id=\"\">\r\n                    <option value=\"updated\"> По дате обновления</option>\r\n                    <option value=\"name\">По имени</option>\r\n                    <option value=\"cardsCount\">По количеству карт</option>\r\n                </select>\r\n                <select onChange={changeOrderHandler} value={orderSelectValue} name=\"\" id=\"\">\r\n                    <option value={\"0\"}>По убыванию</option>\r\n                    <option value={\"1\"}>По возрастанию</option>\r\n                </select>\r\n                <button onClick={() => {\r\n                    dispatch(getPacksTC({sortPacks: `${orderSelectValue}${typeSelectValue}`}))\r\n                }}>Sort</button>\r\n            </div>\r\n            <div className={s.paginator}>\r\n                <Paginator clickHandler={(p: number) => dispatch(getPacksTC({page: p, packName: searchValue}))}\r\n                           paginatorSize={10} currentPage={pack.page} pagesCount={pagesCount}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {CardPackType, UpdatePackDataType} from \"../../api/packs-api\";\r\nimport s from \"./Packs.module.css\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {addPackTC, delPackTC, getPacksTC, setFilterPacksAC, updPackTC} from \"../../store/packs-Reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PanelForPacks} from \"../../common/panelForPacks/PanelForPacks\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\n\r\n\r\nexport const Packs = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.auth.userData?._id)\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs.cardPacks)\r\n    const [rend, setRend] = useState<number>(0)\r\n\r\n    const addPack = () => {\r\n        dispatch(addPackTC({name: \"New Pack\"}))\r\n    }\r\n    const delPack = (id: string) => {\r\n        dispatch(delPackTC(id))\r\n    }\r\n    const updatePack = (data: UpdatePackDataType) => {\r\n        dispatch(updPackTC(data))\r\n    }\r\n\r\n    if (statusApp !== \"loading\" && rend !== 1) {\r\n        setRend(1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (statusApp !== \"loading\") {\r\n            dispatch(getPacksTC())\r\n        }\r\n    }, [rend])\r\n\r\n    return (\r\n        <div>\r\n            <PanelForPacks/>\r\n            <div className={s.packsHeader}>\r\n                <div>Name</div>\r\n                <div>\r\n                    cardsCount\r\n                    <button onClick={()=> dispatch(setFilterPacksAC(\"UP\"))}>Up</button>\r\n                    <button onClick={()=> dispatch(setFilterPacksAC(\"DOWN\"))}>Down</button>\r\n                </div>\r\n                <div>Created</div>\r\n                <div>Updated</div>\r\n                <div>\r\n                    <button style={{margin: \"10px\"}} onClick={addPack}>add</button>\r\n                </div>\r\n            </div>\r\n            {cardPacks.map((cp) => <div key={cp._id} className={s.packs}>\r\n                <div style={{width: \"300px\"}}>{cp.name}</div>\r\n                <div style={{width: \"300px\"}}>{cp.cardsCount}</div>\r\n                <div style={{width: \"300px\"}}>{cp.created}</div>\r\n                <div style={{width: \"300px\"}}>{cp.updated}</div>\r\n                <div className={s.buttons}>\r\n                    <button disabled={userId !== cp.user_id} style={{margin: \"10px\"}}\r\n                            onClick={() => delPack(cp._id)}>delete\r\n                    </button>\r\n                    <button disabled={userId !== cp.user_id} style={{margin: \"10px\"}}\r\n                            onClick={() => updatePack({_id: cp._id, name: \"Extra new\"})}>update\r\n                    </button>\r\n                    <NavLink to={`/cards/${cp._id}`} style={{margin: \"10px\"}}>cards</NavLink>\r\n                </div>\r\n            </div>)}\r\n\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nexport type GetCardsParamsType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type AddCardDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type UpdateCardDataType = {\r\n    _id: string\r\n    question?: string\r\n    comments?: string\r\n}\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    shots: number\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    _id: string\r\n}\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true\r\n})\r\n\r\nexport const cardsAPI = {\r\n    getCards (data: GetCardsParamsType) {\r\n        return instance.get<GetCardsResponseType>(`cards/card`, {params: data})\r\n    },\r\n    addCard (data: AddCardDataType) {\r\n        return instance.post(`cards/card`, {card: data})\r\n    },\r\n    deleteCard (id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n    },\r\n    updateCard (data: UpdateCardDataType) {\r\n        return instance.put(`cards/card`, {card: data})\r\n    }\r\n}","import {\r\n    AddCardDataType, cardsAPI, CardType, GetCardsParamsType, GetCardsResponseType, UpdateCardDataType\r\n} from \"../api/cards-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionType = getCardsReturnType\r\n\r\nconst GET_CARDS = \"cards/GET-CARDS\"\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardType>,\r\n    cardsTotalCount: 0,\r\n    maxGrade: 10,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 15,\r\n    packUserId: \"\"\r\n}\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/GET-CARDS\":\r\n            return {...state, ...action.data}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCards = (data: GetCardsResponseType) => {\r\n    return {\r\n        type: GET_CARDS,\r\n        data\r\n    } as const\r\n}\r\ntype getCardsReturnType = ReturnType<typeof getCards>\r\n\r\nexport const getCardsTC = (data: GetCardsParamsType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const params = getState().cards\r\n    cardsAPI.getCards(data).then((response) => {\r\n        dispatch(getCards({...response.data, pageCount: params.pageCount}))\r\n    })\r\n}\r\n\r\nexport const addCardTC = (data: AddCardDataType) => (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const state = getState().cards\r\n    cardsAPI.addCard(data).then(() => {\r\n        dispatch(getCardsTC({\r\n            cardsPack_id: data.cardsPack_id,\r\n            max: state.maxGrade,\r\n            min: state.minGrade,\r\n            page: state.page,\r\n            pageCount: state.pageCount\r\n        }))\r\n    })\r\n}\r\n\r\nexport const delCardTC = (cardId: string, packId: string) => (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const state = getState().cards\r\n    cardsAPI.deleteCard(cardId).then(() => {\r\n        dispatch(getCardsTC({\r\n            cardsPack_id: packId,\r\n            max: state.maxGrade,\r\n            min: state.minGrade,\r\n            page: state.page,\r\n            pageCount: state.pageCount\r\n        }))\r\n    })\r\n}\r\n\r\nexport const updCardTC = (packId: string, data: UpdateCardDataType) => (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    const state = getState().cards\r\n    cardsAPI.updateCard(data).then(() => {\r\n        dispatch(getCardsTC({\r\n            cardsPack_id: packId,\r\n            max: state.maxGrade,\r\n            min: state.minGrade,\r\n            page: state.page,\r\n            pageCount: state.pageCount\r\n        }))\r\n    })\r\n}","import s from \"./Cards.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {CardType} from \"../../api/cards-api\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {addCardTC, delCardTC, getCardsTC, InitialStateType, updCardTC} from \"../../store/cards-Reducer\";\r\nimport {Paginator} from \"../../common/paginator/Paginator\";\r\nimport {RequestStatusType} from \"../../store/app-Reducer\";\r\n\r\nexport const Cards = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const userId = useSelector<AppRootStateType, string | undefined>(state => state.auth.userData?._id)\r\n    const cardsState = useSelector<AppRootStateType, InitialStateType>(state => state.cards)\r\n    const statusApp = useSelector<AppRootStateType, RequestStatusType>(state => state.app.appStatus)\r\n    const {id} = useParams<{ id?: string }>()\r\n    const [rend, setRend] = useState<number>(0)\r\n\r\n    const addCard = () => {\r\n        if (id) {\r\n            dispatch(addCardTC({cardsPack_id: id, answer: \"ans\", question: \"que\"}))\r\n        }\r\n    }\r\n    const deleteCard = (cardId: string, packId: string) => {\r\n        dispatch(delCardTC(cardId, packId))\r\n    }\r\n    const updateCard = (cardId: string) => {\r\n        if (id) {\r\n            dispatch(updCardTC(id, {_id: cardId, comments: \"new ans\", question: \"new que\"}))\r\n        }\r\n    }\r\n\r\n    if (statusApp !== \"loading\" && rend !== 1) {\r\n        setRend(1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id && statusApp !== \"loading\") {\r\n            dispatch(getCardsTC({cardsPack_id: id, pageCount: cardsState.pageCount}))\r\n        }\r\n    }, [rend])\r\n\r\n    return (<div>\r\n            <Paginator clickHandler={(n: number) => dispatch(getCardsTC({\r\n                page: n,\r\n                cardsPack_id: id,\r\n                pageCount: cardsState.pageCount\r\n            } as any))}\r\n                       paginatorSize={10} pagesCount={Math.ceil(cardsState.cardsTotalCount / cardsState.pageCount)}\r\n                       currentPage={cardsState.page}/>\r\n            <div className={s.cardsHeader}>\r\n                <div>Question</div>\r\n                <div>Answer</div>\r\n                <div>Grade</div>\r\n                <div>Created</div>\r\n                <div>Updated</div>\r\n                <div>\r\n                    <button disabled={userId !== cardsState.packUserId} style={{margin: \"10px\"}} onClick={addCard}>Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {cards.map(c => <div key={c._id} className={s.cards}>\r\n                <div style={{width: \"250px\"}}>{c.question}</div>\r\n                <div style={{width: \"250px\"}}>{c.answer}</div>\r\n                <div style={{width: \"250px\"}}>{c.grade}</div>\r\n                <div style={{width: \"250px\"}}>{c.created}</div>\r\n                <div style={{width: \"250px\"}}>{c.updated}</div>\r\n                <div className={s.buttons}>\r\n                    <button disabled={userId !== cardsState.packUserId} style={{margin: \"10px\"}}\r\n                            onClick={() => deleteCard(c._id, c.cardsPack_id)}>Delete\r\n                    </button>\r\n                    <button disabled={userId !== cardsState.packUserId} style={{margin: \"10px\"}}\r\n                            onClick={() => updateCard(c._id)}>Update\r\n                    </button>\r\n                </div>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Redirect, Route, Switch } from 'react-router-dom';\r\nimport Registration from \"./pages/registration/Registration\";\r\nimport Profile from \"./pages/profile/Profile\";\r\nimport NewPasswordPage from './pages/newPasswordPage/NewPasswordPage';\r\nimport PasswordRecoveryPage from './pages/passwordRecoveryPage/PasswordRecoveryPage';\r\nimport TestPage from \"./pages/testPage/TestPage\";\r\nimport Error404 from \"./pages/error404/Error404\";\r\nimport Main from './pages/main/Main';\r\nimport {LoginContainer} from \"./pages/login/LoginContainer\";\r\nimport {Navigations} from \"./common/Navigation/Navigation\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {meRequestTC} from \"./store/auth-Reducer\";\r\nimport {Packs} from \"./pages/Packs/Packs\";\r\nimport {Cards} from \"./pages/Cards/Cards\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(meRequestTC())\r\n    },[dispatch])\r\n  return (\r\n    <div className=\"App\">\r\n      <Navigations/>\r\n      <Switch>\r\n        <Route exact path={\"/\"} render={()=> <Main/>}/>\r\n        <Route path={\"/login\"} render={()=><LoginContainer/>}/>\r\n        <Route path={\"/registration\"} render={()=><Registration/>}/>\r\n        <Route path={\"/profile\"} render={()=><Profile/>}/>\r\n        <Route path={\"/new-password-page/:token\"} render={()=><NewPasswordPage/>}/>\r\n        <Route path={\"/password-recovery-page\"} render={()=><PasswordRecoveryPage/>}/>\r\n        <Route path={'/test-page'} render={ () => <TestPage/> }/>\r\n        <Route path={'/error404'} render={ () => <Error404/> }/>\r\n        <Route path={'/packs'} render={ () => <Packs/> }/>\r\n        <Route path={'/cards/:id?'} render={ () => <Cards/> }/>\r\n        <Redirect from={ '*' } to={'/error404'}/>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { appReducer } from \"./app-Reducer\";\r\nimport { authReducer } from \"./auth-Reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {regReducer} from \"./reg-Reducer\";\r\nimport { passwordRecoveryReducer } from \"./passwordRecovery-Reducer\";\r\nimport {packsReducer} from \"./packs-Reducer\";\r\nimport {cardsReducer} from \"./cards-Reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    pass: passwordRecoveryReducer,\r\n    reg: regReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n})\r\n\r\n// сразу добавляю middleware для использования redux-thunk\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fountainG\":\"Preloader_fountainG__bCKyL\",\"bounce_fountainG\":\"Preloader_bounce_fountainG__2KlRb\",\"fountainG_1\":\"Preloader_fountainG_1__1hpN_\",\"fountainG_2\":\"Preloader_fountainG_2__hEvEe\",\"fountainG_3\":\"Preloader_fountainG_3__v02_w\",\"fountainG_4\":\"Preloader_fountainG_4__3aewM\",\"fountainG_5\":\"Preloader_fountainG_5__2kMZ5\",\"fountainG_6\":\"Preloader_fountainG_6__1VZ9R\",\"fountainG_7\":\"Preloader_fountainG_7__2eerP\",\"fountainG_8\":\"Preloader_fountainG_8__XeV9g\"};"],"sourceRoot":""}